Chapter 1
- AAP2 simplifies development and use of Ansible Playbooks at scale
  - by introducing Ansible Content Collections
  - and automation execution environments
- Automation content navitor == ansible-navigator
  - can extend and replace many previous Ansible commands
  - including ansible-playbook
- Ansible Content Collections provide
  - related Ansible modules, roles, plug-ins
  - supported by the same group of software developers
- Automation execution environments
  - container images
  - contain specific version of
    - Ansible Core
    - Ansible Content Collections
    - any Python library
    - executables
    - other dependencies
  - to run playbooks
- Automation content should be managed in version control system
  - such as Git
  - enables to track/control change to code
- Implement recommended practices
  - facilitates collaboration
  - reduces potential problems

Chapter 2
- ansible-navigator doc --mode stdout
  - to access the module documentation
- ansible-navigator images
  - to inspect automation execution environments
  - to list collections
  - to list other resources
- use FullyQualifiedCollectionNames
- ansible-galaxy collection install
  - to install Asnible Content Collectinos
  - --collections-paths specifies installation directory
- collections/requirements.yml
  - to list Ansible Content Collections required for the project
- Automation execution environments can access collections/ subdir
- ee-supported-rhel8 is default aee and includes builtin and collections
- ee-minimal-rhel8 provides only builtin
- ee-29-rhel8 for playbooks requiring Ansible 2.9

Chapter 3
- Automation controller provides centralized location
  - to run Ansible code
  - to review results
- Automation contoller project specifies
  - location of a Git repo
    - that stores Ansible code
    - a source contolre credential
- Automation controller job template specifies
  - inventory
  - machine credentials
  - execution environment
  - project
  - and playbook to run
  - on managed hosts
- use webUI to launch automated jobs from template
- using ansible-navigator to test playbooks in an exec.env
  - can help streamline the process
  - of setting up the playbooks
  - to run successfully

Chapter 4
- ansible-navigator config
  - explore/analyze current config used by 'ansible-navigator run'
- Automation content nvaigator can use only ansible.cfg files, that it can ''see' inside the automation exec env
  - these files include
    - /etc/ansible/ansible.cfg in the exec env
    - ansible.cfg in your project directory
- configure automation content navigator settings by
  - using the file defined by ANSIBLE_NAVIGATOR_CONFIG env var
  - ansible-navigator.yml in your current dir
  - ~/.ansible-navigator.yml in your homedir
- --sample generates a sample ansible-navigator.yml
- --effective generates config that reflects current effective config

Chapter 5
- use inventory plug-ins provided by collections
  - to dynamically obtain lists of hosts and groups
  - from sources such as cloud, virtualization, and systems mgmt platforms
- dynamic inventory scripts can generate hosts and group informations
  - from sources external to Ansible
- use YAML inventory plug-in for static inventories in YAML format
- use 'ansible-navigator inventory' to convert INI to YAML format
- good practice: keep most variables out of static inventory files
- take advantage of inventory groups to improve maintainanbility
  - group_vars/ dir
  - host_vars dir
- use special inventory variables
  - to control connections
  - to make playbook output more readable

Chapter 6
- privilege escalation configured on multiple levels
  - play
  - role
  - block:
  - task:
- uses several directives
  - become
  - become_user
  - become_method
  - become_flags
- ansible runs play sections in following order
  - pre_tasks
  - roles
  - tasks
  - post_tasks
- handlers run in the same order as they appear in the play
- use tags to select/skip tasks during play execution
- disabling fact gathering speeds up playbook execution
- use callback plug-ins to 'profile' playbooks
  - timer
  - profile_tasks
  - profile_roles

Chapter 7
- use filters in Jinja2 expressions and templates, to
  - format data
  - transform data
  - parse data
- filters provided by
  - Jinja2
  - Ansible Content Collections
- you can apply multpiple filters sequentially in the same Jinja2 expression
- lookup plug-ins
  - get data from external sources for plays
  - run in the execution environment
  - NOT on the managed host
- you can combine filter and lookup plug-ins
  - to implement sophisticated loops
- Ansible provides manny supplementary filters
  - for processing networking related data
  - such as 'ansible.utils.ipaddr'
