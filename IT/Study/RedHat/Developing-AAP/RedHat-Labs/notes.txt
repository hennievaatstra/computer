login console:
  student : student
login podman:
  student : redhat123
login git push:
  Student@123

Chapter 1
- developer-navigator
  $ podman login hub.lab.example.com
  $ ansiblerun intranet.yml -m stdout --eei ee-supported-rhel8
- develop-git
  - customize GIT env
  $ git config --global user.name 'Student User'
  $ git config --global \user.email student@lab.example.com
  $ git config --global push.default simple
  $ git config --global credential.https://git.lab.example.com.username student
  $ git config --global credential.helper cache --timeout=7200
  - review
  $ git config --global -l
  - create .gitignore
  $ vi .gitignore
    > add filenames
  $ git add .gitignore
  $ git commit -m "blah"
  $ git push
- develop-practices
  - replace playbook vars: by group_vars/<file>
  - replace {{ var }} with new {{ var }} name
  - replace shell: to start service with service: module
  - add block and rescue directives to that play that restart the web service on the hosts in the webservers group if the web application is unavailable
      - name: Web application test
      block:
        - name: Check web application
          ansible.builtin.uri:
            url: http://{{ item }}
          loop: "{{ groups['webservers'] }}"
      rescue:
        - name: Restart web server
          ansible.builtin.service:
            name: "{{ web_service }}"
            state: restarted

Chapter 2
- manage-resuing
  - locate a collection
    - firewalld
    - NOT in ansible.builtin
    $ podman login hub.lab.example.com
    $ ansible-navigator doc -l --eei ee-supported-rhel8 --pp missing -m stdout
    /firewalld
  - define collections in playbook
    - under become: [eg.]
      collections:
      - ansible.builtin
      - ansible.posix
- manage-finding
  - add local hub as repo for collections
    > webUI 
    > Collections > Repo Management
      copy CLI config
      add in ansible.cfg
    > Collections > API token management
      > Load token
      add in ansible.cfg
  - to show addedd collections
    - add collections path in ansible.cfg defaults
      collections_paths = ./collections:/usr/share/ansible/collections
  - install using requirements.yml
    ---
    collections:
      - name: ansible.netcommon
        version: 2.1.0
    $ ansible-galaxy collection install -r requirements.yml
- manage-selecting
  - inspect an image for collections:
    $ ansible-navigator images --eei hub.lab.example.com/ee-minimal-rhel8
      - press '0' to select the image
      - press '2' for Ansible version and collections
    - repeat for other images

Chapter 3
- controller-playbooks
  - create source control credentials
    > webUI > Resources > Credentials
    type Source Control
  - create machine credential
    > webUI > Resources > Credentials
    type Machine
  - create Project
    > webUI > Projects

Chapter 4
- config-ansible
  - ansible.cfg in cwd relative to ansible-navigator overwrites defaults
- config-navigator
  - create an ansible-navigator.yml config file
    - first create a 'sample'
    $ ansible-navigator --effective -m stoud --eei ee-supported-rhel8:latest --pp never > tt
    - copy/move sample to config
    $ cp tt ansible-navigator.yml
  - specify the ansible1.cfg file to be used
    - in the execution-environment lines, add
      environment-variables:
        set:
          ANSIBLE_CONFIG: /home/student/config-navigator/ansible1.cfg
    - use --pae to disable playbook artifacts
    - use ask-vault-pass to prompt for ansible-vault passwd
    - configvar precedence [high > low]:
      - envvar [by export NAME = ]
      - ./ansible-navigator.yml
      - ~/.ansible-navigator.yml

Chapter 5
- inventory-dynamic
  - dynamic inventory scripts need to be executable [rwx]
  - add placeholder groupname definition in static inventory
    - for dynamic groups 
- inventory-yaml
  - convert INI inventory yo YAML:
  $ ansible-navigator inventory --mode stdout -i origin_inventory --list --yaml
  - in yaml inventory hostnames also have a : appended
    web_servers:
      hosts:
        web1.example.com:
        web2.example.com:
  - in yaml inventory :children groups are broken up:
  [all_servers]
  servera.lab.example.com
  [all_servers:children]
  web_servers
    -- becomes:
  all_server:
    hosts:
      servera.lab.example.com:
    children:
      web_servers:
  - note that hosts: is missing in the children: definition
- inventory-variables
  Split the location of host variable files across multiple directories to improve maintainability
  - move vars lines from playbook to relevant group_vars/<group>/<varsfile>.yaml
  - make hostname displayed more meaningfule [human]
    servera.lab.example.com:
    - becomes
    load_balancer:
      servera.lab.example.com
    - note: no : appended to hostname

Chapter 6
- task-escalation
  - playbook needs privilege escalation on only one of two plays
    - become: false in ansible.cfg
    - set become: true in head of play
    - or set tasks in block: which has become: true
- task-execution
  - one task in pre_tasks: sets 2 facts
  - then calls a handler to display the value
  - in the handler listen: is used to respond to the handler call
    - in two tasks
    - no loop or something
  - uninstall rpm then print and call a handler
    notify: package check
    - name: Check for the httpd package
      ansible.builtin.debug:
        msg: "httpd is not installed!"
      when: "'httpd' not in ansible_facts['packages']"
      listen: package check
- task-tagging
  - tags can be set on several levels
    - default syntax is list:
      tags:
        - test
    - tag a role:
      roles:
        - { role: databases, tags: ['production', 'staging'] }
  - tags can be called on CLI
    $ ansible-navigator ..... --tags tests
    $ ansible-navigator ..... --skip-tags tests
  - listing tags in playbook
    $ ansible-navigator run -m stdout playbook.yml -i inventory --list-tags
  - special tags:
      always  - runs every time [except with '--skipped-tags always']
      tagged  - runs any resource with an explicit tag
      untagged  - runs any resource that does not have an explicit tag and excluded all tagged resources
      all     - includes all tasks in a play, tag or not; default behavior of Ansible
      
  - get output from webserver
    - ansible.builtin.uri:
        url: http://localhost
        return_content: true
      register: test_url
      failed_when: "'Hello from' not in test_url['content']"
- task-speed
  - set fact caching
    false | true | smart
  - increase parallelism
    forks=<num>
  - avoid loops in package manager
    - specify multiple rpms as a list
  - use synchronize module instead of copy
  - use templates
  - enable pipelining to reduce the number of SSH connections
    - in ansible-navigator.yml under execution-environment:
      environment-variables:
        set:
          ANSIBLE_PIPELINING: true
  - profile playbook execution with callback plugins, eg.
    [defaults]
    callback_plugin=timer, profile_tasks, cgroup_perf_recap
    - ansible-navigator doc -t callback -l -m stdout command to list the available callback plug-ins
    - to help identify slow tasks and roles
      [defaults]
      callbacks_enabled=timer, profile_tasks, profile_roles
      - timer displays duration of playbook
      - profile_tasks displays starttime/timespent of/on each task, sorted descending at end
      - profile_roles displays timespent on each role, sorted descending at end

Chapter 7
- data-filters
  - variable: {{ var }}
  - filtered: {{ var | filter }}
  - eg. set a default value
    shell: "{{ item['shell'] | default('/bin/bash') }}"
  - multiple filters can be used [pipes]
      "{{ pattern | regex_search('test') | default('MESSAGE', true) }}"
      "{{ pattern | bool | default('MESSAGE') }}"
  - unite the values of two variables using 'union()' filter:
    apache_package_list: "{{ apache_base_packages }}"
    -- becomes
    apache_package_list: "{{ apache_base_packages | union(apache_options_packages) }}"
  - enable a commented variable to be omitted when false
    enablerepo: "{{ apache_enablerepos_list }}"
    -- becomes
    enablerepo: "{{ apache_enablerepos_list | default(omit, true) }}"
  - replace an empty set_fact:
    webapp_deployed_files: []
    -- for
    webapp_deployed_files: "{{ webapp_find_files | map(attribute='path') | list }}"
      - webapp_file_files holds a list of files
      - map() gets the path of those files
      - ordered as a list
  - replace an empty set_fact
    webapp_rel_deployed_files: [
    -- for
    webapp_rel_deployed_files: "{{ webapp_deployed_files | map('relpath', webapp_content_root_dir) | list }}"
  - replace empty loop
    loop: []
    -- for
    loop: "{{ webapp_rel_deployed_files | difference(webapp_file_list) }}"
      - start with files in webapp_rel_deployed_files
      - apply difference filter

- data-filters
  - lookup plugins
    - syntax: hosts: "{{ lookup('ansible.builtin.file', '/etc/hosts') }}"
    - info: ansible-navigator doc --mode stdout -t lookup PLUGIN_NAME
    ! file plugin reads files on exec.env NOT on controller
  - apply data with a template
    - to process templates/my.template.j2:
      {{ lookup('ansible.builtin.template', 'my.template.j2') }}
  - reading command output:
    raw output: {{ query('ansible.builtin.pipe', 'ls files') }}
    list output: {{ query('ansible.builtin.lines', 'ls files') }}
  - getting content from a URL:
    {{ lookup('ansible.builtin.url', 'https://my.site.com/my.file') }}
  - getting content from Kubernetes:
    {{ lookup('kubernetes.core.k8s', kind='Deployment', namespace='ns', resource_name='my_res') }}
  - handling plugin errors:
    {{ lookup('ansible.builtin.file', 'my.file', errors='warn') }}
  - set_fact user_groups
    "{{ lookup('ansible.builtin.file', 'groups.yml') | from_yaml }}"
    - use file plugin to read data from groups.yml
    - filter from_yaml to structure data as yaml
  - read user info from a file
    "{{ query('ansible.builtin.lines', 'cat users.txt') }}"
  - create random password,
    - looping over items in previous list
      "{{ lookup('ansible.builtin.password', 'credentials/' + item + ' length=9') }}"
    - hash the password
      password: "{{ password_plain | password_hash('sha512') }}"
    - only set password for a NEW user
      update_password: on_create
- data-loops
  - use data from a dictionary in a loop as items
    name: "{{ item['key'] }}"
    gid: "{{ item['value']['gid'] }}"
    loop: "{{ rgroups | dict2items }}"
  - use a nested loop with 'subelements' filter to transform variables into a list
    - the dictionary also holds a list 'my_groups' that we need
    - username will be "{{ item[0]['name'] }}"
    - groups will come from "{{ item[1] }}"
- data-netfilters
  - requires ansible.utils.ipaddr collection

