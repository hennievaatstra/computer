Chapter 1
Red Hat Ansible Automation Platform 2 simplifies development and use of Ansible Playbooks at scale, by introducing new features such as Ansible Content Collections and automation execution environments.

Automation content navigator (ansible-navigator) extends and can replace many previous Ansible commands, including ansible-playbook.

An Ansible Content Collection provides a set of related Ansible modules, roles, and plug-ins that are supported by the same group of software developers.

Automation execution environments are container images that contain a specific version of Ansible Core, Ansible Content Collections, and any Python libraries, executables, or other dependencies needed to run playbooks.

You should manage your automation content in a version control system, such as Git, which enables you to track and control changes to your automation code.

Implementing recommended practices facilitates collaboration and reduces potential problems.

Chapter 2
You can use the ansible-navigator doc --mode stdout command to access the module documentation provided by Ansible Content Collections that are available to your automation execution environment.

You can use the ansible-navigator images command to inspect automation execution environments and to list the collections and other resources and collection dependencies provided by an automation execution environment's container image.

Ansible Playbooks should use fully qualified collection names (FQCNs) to refer to modules, roles, and plug-ins provided by Ansible Content Collections.

The ansible-galaxy collection install command installs Ansible Content Collections on the local system. The --collections-path (or -p) option specifies the installation directory.

You can use the collections/requirements.yml file to list the Ansible Content Collections that are required for the project.

Automation execution environments can access the Ansible Content Collections that are installed in the collections/ subdirectory in the directory that contains the playbook.

The ee-supported-rhel8 automation execution environment is used by default by automation content navigator and automation controller, and includes selected Red Hat Certified Ansible Content Collections in addition to the ansible.builtin collection.

The ee-minimal-rhel8 automation execution environment only provides the ansible.builtin Ansible Content Collection, but you can also use Ansible Content Collections from your project's collections/ directory.

You can use the ee-29-rhel8 automation execution environment for playbooks that require Ansible 2.9.

Chapter 3
Automation controller provides a centralized location that you can use to run your Ansible automation and review the results of automation runs.

An automation controller project specifies the location of a Git repository that stores Ansible code and, if needed, a source control credential to authenticate to the Git repository.

An automation controller job template specifies the inventory, machine credentials, execution environment, project, and playbook to use to run your Ansible code on managed hosts.

You can use the automation controller web UI to launch automation jobs from a job template and to review the results of jobs.

Using ansible-navigator to test Ansible Playbooks in an execution environment can help streamline the process of setting up those playbooks to run successfully on automation controller.

Chapter 4
The ansible-navigator config command helps you explore and analyze the current configuration used by the ansible-navigator run command.

Automation content navigator can use only ansible.cfg files that it can see from inside the automation execution environment. These files include the /etc/ansible/ansible.cfg file in the execution environment container and the ansible.cfg file in your project directory.

You can configure automation content navigator settings by using the file defined by the ANSIBLE_NAVIGATOR_CONFIG environment variable, the ansible-navigator.yml configuration file in your current directory, or the ~/.ansible-navigator.yml configuration file in your home directory.

The ansible-navigator settings --sample command generates a sample ansible-navigator.yml configuration file.

The ansible-navigator settings --effective command generates a configuration file that reflects your current effective configuration, including options specified on the command line, values of environment variables, and defaults.

Chapter 5
You can use inventory plug-ins provided by collections to dynamically obtain lists of hosts and groups from sources such as cloud, virtualization, and systems management platforms.

Dynamic inventory scripts can generate host and group information from sources external to Ansible.

You can use the yaml inventory plug-in to write static inventory files in YAML format.

You can use the ansible-navigator inventory command to help you convert an inventory file in INI format into YAML format.

A good practice is to keep most variables out of static inventory files.

Take advantage of inventory groups and the group_vars/ and host_vars/ directories to improve project maintainability.

Use the special inventory variables to control connections to hosts and use inventory hostnames to make playbook output more readable.
