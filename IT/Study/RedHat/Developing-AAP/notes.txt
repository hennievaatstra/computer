Chapter 1 Developing Playbooks with Ansible Automation Platform 2

AAP2 components:
- Ansible Core
  - fundamental functionality used to run Ansible Playbooks
  - defines automation language used to write playbooks in yaml
  - provides key functions [loops,conditionals etc]
  - provides framework and basic command-line tools
  - provides in ansible-core rpm
- Ansible Content Collections
  - previously modules
  - now reorganizes into separate collections
  - made up of related modules, roles and plugins
  - ansible core is limited to a small set of modules 'ansible.builtin'
  - ansible.builtin is always available
  - collections provide flexibility to:
    - select different versions of collections
    - or different sets of collections
    - ability to update modules on a separate cadence from Ansible itself
- Ansible Content Navigator
  - new top-level tool to develop and test Ansible playbooks
  - replaces and extends earlier command-line utilities, including:
    - ansible-playbook
    - ansible-inventory
    - ansible-config
  - separates the control node [on which you run Ansible] from the automation execution environment that runs is
  - by running the playbooks in a container
- Automation Execution Environments
  - conainer images that contain AnsibleCore, AnsibleContentCollections
  - and any Python libraries, executables or other dependencies needed to run playbooks
  - default environment in AAP 2.2 provides AnsibleCore 2.13
  - and collections to provide a user experience similar to Ansible 2.9
  - you an use ansible-builder to create you own execution environments
- Automation Controller
  - formerly called Ansible Tower
  - provides central point of control to run enterprise automation code
  - in Tower, the system was both control node and execution environment
  - now separated
  - can run execution environments on remote nodes
  - communicating over the network using a feature calles automation-mesh
- Automation Hub
  - provides a way to manage and distribute automation content
  - a public service at console.redat.com provides access to Red Hat Ansible Certified Content Collections
  - that can be downloaded and used with ansible-galaxy and with automation controller
  - you can also setup a private automation hub for your own AnsibleContentCollections
Hosted services
  - addition to the hosted automation at console.redhat.com
  - Red Hat Insights for RedHat AAP
    - helps you understand what automation code you are running and whether it is successful
    - also to evaluate the positive impact on you organization
  - Automation Analytics
    - helps to provide better insight into the performance of you automation infrastructure
    - to analyze how you use automation and what modules/playbooks/workflows yuou most frequently use

QUIZ
1c 2a 3d 4a 5b

Running Playbooks with Automation Content Navigator

ansible-navigator
 - new tool in AAP2
 - combines features formerly provided by: ansible-[playbook|inventory|config|doc]
 - new interactive mode woith text-based interface
 - can be run using "--mode stdout" to provide output like the previous tools
 eg:
 old: $ ansible-playbook playbook.yml -i inventory
 new: $ ansible-navigator run playbook.yml -i inventory -m stdout

automation execution environment
- a container image that includes Ansible Content Collections
- their software dependencies
- and a minimal Ansible engine
- use by both ansible-navigator and automation controller
- helps to avoid creating multiple Python virtual environments
- when no exec.env is specified, the default is pulled from registry.redhat.com
- this needs to authenticate
- you need a login to registry.redhat.com and a valid subscription to AAP
- use: podman login registry.redhat.io before running ansible-navigator
- required only once per session
- use --execution-environmnet-image (-eei) to select a specific container
- eg.: ee-supported-rhel8:latest to use the latest [tagged] version of that image

Install Automation Content Navigator
- ansible-navigator is only installed on your control node
- you need a valid AAP subscription
- installation procedure:
  - Register using RHSM:
  $ subscription-manager register
  - Enable AAP2 repo:
  $ subscription-manager repos --enable ansible-automation-platform-2.2-for-rhel-8-x86_64-rpms
  - install ansible-navigator
  $ yum install ansible-navigator

Configuring Authentication to Managed Hosts
- automation content navigator need login to managed hosts and superuser access
- easiest way by SSH key-based authentication
- to an account that allows privilege escalation through sudo without password

Preparing SSH Key-based authentication
- set a remote_user directive in de [defaults] section of ansible config on control node
- use ssh-keygen to generate SSH key pair for user that runs ansible-navigator
- install its public key in ~/.ssh/authorized_keys file for the remote_user on each managed hsots
- on managed hosts configure passwordless sudo for the remote_user
! ansible-navigator runs in a container and cannot access your ~/.ssh directory
- running ssh-agent on controlnode can provide SSH private keys to execution environment
- GUI login autoprovides ssh-agent and ssh-add us run to add private keys
- ssh login must start ssh-agent [eval $(ssh-agent)], then run ssh-add, then run ansible-navigator in the same shell

Running Automation Content Navigator
- $ ansible-navigator
- old vs new:
- ansible-[config|doc|inventory|playbook]
- ansible-navigator [config|doc|inventory|run]
- subcommands: [collections|config|doc|help|images|inventory|log|open|replay|run]
- in interactive session run eg. :config  to start the subcommand
- run playbook:
  - commandline: ansible-navigator run ...
  - interactive: ansible-navigator :run
- review previous playbook run
  - per default 'playbook artifacts' are enabled
  - names as: site-artifact-2022-10-25T20_05_7.939910+10:00.json
  - can most often be safely ignored/removed
- ansible-navigator doc does NOT support option --list (-l)
- you must explicitly sepcifiy the plug-in name

Guided Excercise
Running Playbooks with Automation Content Navigator
1. install ansible-navigator
  $ sudo yum install ansible-navigator
2. review the excercise playbook
  $ less intranet.yml
3. run the playbook using navigator
  $ podman login hub.lab.example.com
  username; student
  Password: redhat123
  $ ansible-navigator run intranet.yml -m stdout --eei ee-supported-rhel8
4. run the playbook interactively
  $ ansible-navigator --eei ee-supported-rhel8
  :run intranet.yml
  0 - to display details
  ESC - to return to main playbook summary page
  :q - to quit navigator

Implementing Receommended Ansible Practices
- Jeff Geerling:
  - keep things simple
  - stay organized
  - test often
- Keep things simple:
  - use native YAML syntax [indented, multilines]
  - not the "folded" syntax [much on single line]
  - use existing modules
  - adhere to a standard style
    - how many spaces to indent
    - how many vertical white space
    - naming of tasks, plays, roles, variables
    - commenting
- Stay organized
  - take advantage of Ansible organization features
  - such as roles
  - follow conventions for naming
    - use descriptive variables, suc as apache_tls_port
    - it's good practive to prefix role variables with the role name
    - variable names should clarify contents
  - standardize the project structure
  - use dynamic inventories
  - use other tools to construc groups or extra information
    - ansible.builtin.group_by generates group based on a fact
  - consider dividing hosts into different categories
    - geographical, enironmental, sites, services
  - user roles and collections for reusable content
    - use ansible-galaxy to initialize directory hierarchy
    - keer your roles in a roles subdir of your project
  - run playbooks centrally
  - ideally on an automation controller
  - build automation execution environments
    - if you need to frequently use specific Ansible Content Collections
- Perform regular testing
  - verify the result of a task
  - use block: and rescue: directives
    - block: to group tasks
    - rescue: to recover from errors or failures
  - develop playbooks with the latest Ansible version
    - to avoid issues as Ansible modules and features evolve
  - use test tools
    - ansible-navigator run <playbook> --syntax-check -m stdout
    - ansible-lint

Guided exercises:
- setup webserver on servera and serverb
- setup databasesrv on serverc and serverd
- single playbook with two plays
  - play1: webservers
  - play2: dbservers
> replace named hosts with a groupname
  - create hostgroup in inventory
> move variables to hostgroup group variable files
  - group_vars/webservers
  - group_vars/dbservers
  - change var naming in playbook accordingly
> change folded syntax to native syntax

LAB:
- clone git repo
  - $ git clone https://git.lab.example.conf/student/develop-review.git
- create new branch
  - $ git checkout -b exercise
--------------------------------------------------------------------------------

Chapter 2 Managing Content Collections and Execution Environments

Reusing Content from Ansible Content Collections
- a distribution formant for Ansible content
- sets of related modules, roles and plug-ins
- can be downloaded to controlnode
- then used in playbooks
- examples:
  - redhat.insights -  to register a system with Redhat Insights
  - cisco.ios - to manage Cisco IOS network appliances
  - community.crypto - to create SSL/TLS certificates
- install colelctions to only use content you need instead of all modules
- to select a specific version
- to choose between redhat or community versions

Organizing AnsibleContentCollections in Namespaces
- collections are organized in namespaces
- to assign unique names to collections with conflicting with others
- namespace is first part of a collection name
- namespace names are limited 
  - ASCII lowercase letter, numbers and underscore
  - two characters minimum
  - cannot start with underscore

Using Ansible Content Collections
- $ absible-navigator collections
  - to list collections available in automation execution environments
  - then type <number>: to list modules/plugins
  - then enter the module number to access its documentation

Using ACC in playbook
- refer to it with its fully qualified collection name
  - name: blah
    redhat.insights.insight_register:
- example using 'organizations' role from redhat.satellite collection:
  - name: blah
    ansible.buitling.include_role:
      name: redhat.satellite.organizations

Finding Ansible Content Collections
- to update legacy playbooks using modules that moved to collections:
- identify in which collections they are now available
- https://github.com/ansible/ansibleblob/devel/lib/ansible/config/ansible_builtin_runtime.yml to map old to new

Using the Built-in collection
- ansible.builtin always included
- set of common modules
  - copy, template, file, yum, command, service and more
- can be used with shortname
- RedHat recommends using the FQCN

Finding and Installing Ansible Content Collections
- two sources provide Asnibe Content Collections
  - automation hub : officially supported by Redhat
  - Ansible Galaxy : open source community
Automation hub
- hosts RedHat certified Ansible Content Collections
  - eg. redhat.[rhv|satellite|insights]
  - cisco.ios
- requires valid RedHat AAP subscription
- UI at https://console.redhat.com/ansible/automation-hub
Ansible Galaxy
- public site
  - eg. community.[crypt|postgresql|rabbitmq]
  - UI at https://galaxy.ansible.com

Installing Ansible Content Collections
- one method:
  - install collection in the same dir as your playbook
  - before running ansible-navigator command
  - normally you create a collecionts subdir for your collection
Install from CLI
- $ ansible-galaxy collection install community.crypto
- from local/remote .tar
  $ ansible-galaxy collection install /tmp/community-dns-1.2.0.tar.gz
- ansible checks for 'colections/' subdir in the playbookdir
- if not found: check collections_patch from ansible.cfg
- by default collections are installed in first directory that collections_paths defines
- use '-p <dir>' to psecify an alternative dir
Install with requirements file
- collections/requirements.yml
- list of collections needed for playbooks in project
- automation controller detects it
- automatically installs collections
- similar to a roles/requirements.yml file
- $ ansible-galaxy collection install -r <requirements.yml>
Listing installed collections
- $ ansible-navigator collections
- $ ansible-galaxy collection list

Configuring Collection Sources
- add additional distribution platforms in ansible.cfg
- see exmaple on .pdf page 83

Installing Collection from private Automation hub
- similar to 'automation hub'
- yo do NOT need the auth_url directives

Selecting an Execution Environment
- container image that includes:
  - Ansible Content Colletions
  - their software dependencies
  - a minimal Ansible engine to run your playbooks
- enable portable development of playbooks
- simplifies development process
- helps to ensure predictable, reproducable results
- consists of following concepts:
  - Ansible Core (or Ansible)
  - Ansilbe Content Collections
  - Python and any other dependencies
  - Ansible runner to run playbooks
- 3 prebuilt exe.envs:
 - Minimal    - ee-minimal-rhel8    - minimal with Ansible Core 2.13
 - Supported  - ee-supported-rhel8  - Core 2.13,Collections,dependencies
 - Compatibilty - ee-29-rhel8       - Ansible 2.9 based
- Minimal: good starting point
- Supported: default
- Compatibility: for Ansible 2.9 playbooks or pre-AAP2 code

Inspecting Automation Execution Environments
- $ ansible-navigator images

Using ExecEnvs with content navigator
- $ ansible-navigator run <plb.yml> -eei registry.redhat.io/ansible-automations-platform-22/ee-29-rhel8:latest
- if the container image is already on your system, you can use:
  - -eei ee-29-rhel8:latest
- if not, use 'podman login' to ensure you're authenticated to the registry
- use --pull-policy to control how images are pulled:
  - always
  - missing
  - never
  - tag [if image tag is 'latest']
