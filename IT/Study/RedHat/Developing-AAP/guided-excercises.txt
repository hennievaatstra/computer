Chapter 1

1. use automation content navigator to run a playbook and review results
.install ansible-navigator package
  prereq:
  - registered system
    # subscription-manager register
  - repo enabled
    # subscription-manager repos --enable ansible-automation-platform-2.2-for-rheo8-x86_64-rpms

  $ sudo yum install ansible-navigator

.install podman
  $ podman login <automationhub>
    Username:
    Password:
    Login Succeeded!

.write and run playbooks
  $ ansible-navigator run <playbook.yml> -m stdout -eei <execution env>

2.clone an existing GIT repo, edit files, commit changes, push to repo
. create workdir
  $ mkdir -p ~/git-repos
  $ cd $_
. clone repo
  $ git clone https://<url.git>
  of
  $ git clone git://<url.git>
. create exercise branch
  $ cd <somedir>
  $ git checkout -b exercise
  Switched to a new branch 'exercise'
. configure global settings
  $ git config --global user.name 'My Name'
  $ git config --global user.email myname@my.domain.local
  extra:
  $ git config --global push.default simple
  $ git config --global credential.https://git.lab.example.com student
  $ git config --global credential.helper cache --timeout=7200
. create basic ansible config files
  .ansible.cfg
    [defaults]
    inventory = inventory
    remote_user = devops
  .inventory
    [webservers]
    serverd
. review current status of local Git repo
  $ git status
. add your new files
  $ git add playbook.yml ansible.cfg inventory
. commit
  $ git commit -am "blah"
. push
  $ git push -u origin exercise
.run the playbook
  .login to automationhub
  $ podman login <automationhub>
  .run the playbook
  $ ansible-navigator run playbook.yml -eei ee-supported-rhel8:latest
.create gitignore for naviator output files
  $ vi .gitignore
    ansible-navigator.log
    *-artifact-*
  $ git add .gitignore
  $ git commit -am "blah"
  $ git push

3.apply recommended practices to an exisiting Ansible automation project
- create a name on the second play
- move the listed hosts to a hostgroup in the inventory
- run the play against 'hosts: dbservers'
- use more meaningful names for variables
- use ansible module instead of command/shell

Chapter 2

1.write a playbook that uses modules from an AnsibleContentCollection
. find the module 
  .login to automationhub
  $ podman login hub.example.lab.com
  $ ansible-doc -l | grep firewalld
  hv: fails
  $ ansible-navigator doc -m stdout -l
    .type '/firewalld' to search
  $ ansible-navigator doc -m stdout ansible.posix.firewalld
    .use this FQCN

Chapter 3
1. navigate through the automation controller webUI and launch a job
- create a 'source control credential' [for the Git repo]
  - navigate to controller
  - login as admin:redhat
  - > Resources Credentials > Add
    > Name | Organization | Credential Type | Username | SCM Private Key
- create a machine credential [to run against hosts]
  - > Resources > Credentials > Add
    > Name | Organization | Cred.type | Username |
       SSHPrivateKey | Priv.Esc.Method | Pric.Esc.Username
- create a project
  - points to a Git repo
  - that contains a playbook
  - and an inventory
  - > Resources > Projects > Add
    > Name | Organization | Exec.Env | SRC.Type | SRC.URL |
       SRC.Cred | Options
- create an inventory
- create a template

Chapter 4
1. browse current configuration
  $ ansible-navigator config --eei <ee> --pp missing
  hv: 'inventory' can be found at 'Default host list'

2. change settings for automation controller
- modify ansible.cfg
  - specify new passwd
  hv:
  - ansible-navigator [also] uses ansible.cfg in current/projectdir
  - a non-default value in ansible.cfg shows up yellow in ansible-navigator
  - a default value set in ansible.cfg ALSO shows up yellow in ansible-navigator
  - default values are green when not present in ansible.cfg
  > create a secret-pass with password in plaintext
  > set this file in ansible.cfg as vault_password_file
    - or user vault-password-file=<file> on CLI
  > create&copy passwdhash using mkpasswd cmd
  > create ansible vault file
    username: joe
    pwhash: <hash from above>
  > create playbook for user creating
    username: "{{ username }}"
    password: "{{ pwhash }}"
- generate ansible-navigator settings file
  $ ansible-navigator settings --effective > sample.yml
  $ mv sample.yml ansible-navigator.yml

Chapter 5
1. install custom scripts that dynamically generate a list of inventory hosts
  hv: scripts are redhat training custom
  - create a directory for the exercise and enter it
  - create an inventory directory and an inventory in it
    $ mkdir inventory
    $ vi inventory/hosts
  - create a static parent group 'servers'
    [servers:children]
    webserver
  - the inventorya.py dyn.inv.script
    - defines the webserver group
    - including the servera.lab.example.com host
  - the inventoryb.py dyn.inv.script
    - defines the workstation.lab.example.com host
  - move the dyn.inv.scripts in the inventory dir
  - set x-bits
    hv: no x-bit == it's source as INI file, which also fails
  - check:
  $ ansible-navigator inventory -m stdout --list
  $ ansible-navigator inventory -m stdout --graph

2. convert an INI style inventory 
    [webservers]
    servera.lab.example.com
    serverb.lab.example.com
   to a YAML style inventory
    webserver:
      hosts:
        servera.lab.example.com:
        servera.lab.example.com:
    note:
    - the : after the hostname
    - use wildcards server[a:b].lab.example.com: to group

3. setup directories for multiple host variable files
   - in supplied playbook
     - one play for hosts: lb_servers
     - two tasks
     - each task has a vars: declaration
     > move vars into inventory variable files
   - create directory
     $ mkdir group_vars/lb_servers
   - create vars files
     $ vi group_vars/lb_servers/haproxy.yml
     ---
     ha_proxy_appservers:
        - name: serverb.lab.example.com
          ip: 172.25.250.11
   - repeat for webservers

Chapter 6
1. select the/an appropriate escalation method and privilege isolation
- clone GIT repo
- create new branch and check it out
  $ git checkout -b exercise
- privilege escalation is disabled
  - action with root access will fail
- review playbook
  - install httpd and firewalld
    - firewalld not on rocky91 lab for ansible
    - available on rocky91 aap [navigator]
    $ ansible-galaxy collection install ansible.posix
  - running playbook on CLI fails
  - adding -b will work
- privilege escalation using a block
  - create as new task:
    name: Block task
    become: true
    block:
  - then indent parts to be included
2. use [pre|post]_tasks
- to control whether tasks run before/after roles
- use 'listen' directives to notify mulitple handlers at the same time
- pre_tasks are run before the role
3. use handlers
- handlers are called by the 'notify:' directive

LAB:
Enable the timer and profile_tasks callback plug-ins for the playbook. The two plug-ins are part of the ansible.posix collection. If desired, then you can specify the FQCNs for the callback plug-ins.

Edit the ansible.cfg configuration file and add the plug-ins to the callbacks_enabled directive. The modified file contains the following content:

[defaults]
inventory=inventory
remote_user=devops
callbacks_enabled=ansible.posix.timer,ansible.posix.profile_tasks
- hv: memorize the callbacks config line

Chapter 7
1. use filters to reformat the values of variables
- to skip a missing var 'myvar':
  "{{ myvar | default(omit, true) }}"
- two variables are present for package installation
  - use the 'union' filter to create a sinlge list from them
  - given two lists, rpmsa and rpmsb:
    "{{ rpmsa | union(rpmsb) }}
- use the map() filter to display the value of any key in the entry

2. use 'lookup' and 'query' to template data from external sources
- create a groups.yml with group definitions
- usr lookup to query this file:
  - "{{ lookup('ansible.builtin.file', 'groups.yml') | from_yaml }}"

3. to read from a text file, which name is stored in a var 'warnfile':
  - "{{ lookup('ansible.builtin.file', warnfile') }}"
- to save a generate passwd in a file inde the credentials dir:
  "{[ lookup('ansible.builtin.password', 'credentials/john' + ' length=9') }}"

4. write tasks that use advanced looping
- use a loop with 'dict2items' filter
  - to transform a dictionary into a list
    loop: "{{ rgroups | dict2items }}"
- use a loop to iterate over user variables
  - vars defined in group_vars/all/my_vars.yml
  loop: "{{ my_users | subelements('my_groups') }}"
- use a loop over a list of public_keys
  - use the 'map' filter
  - followed by the 'flatten' filter
  > to generate a simple list of SSH public key files
  public_key_lists:
    - username: john
      public_keys:
        - pukeys/john/id_rsa.pub
  - in debug:
  loop: "{{ public_key_lists | map(attribute='public_keys') | flatten }}"

5. Use filters and plugins to manipulate and validate data stored in variables that contain networking-related information
- use the ansible.utils.ipaddr filter
! not available in my rocky91 lab
  - list collections
    $ ansible-navigator doc -l -m stdout
  - "{{ 192.168.1.1 | ansible.utils.ipaddr }}"
    - print this ip, if no ip is supplied it prints 'false'
  - "{{ 192.168.1.1 | ansible.utils.ipaddr('host')
    - prints the ip if it's a hostaddress
    - likewise: 'net' 'private' 'public'
    - 'revdns' 'network' 'broadcast'
    - or (5) for the 5th address
    - 'range_usable' 'next_usable'
  - likewise:
    "{{ 2001::1/64 | ansible.utils.ipwrap }}"
    - print ipv6 address in []

LAB:
- clone the data-review.git repo
- cd to it, checkout as branch exercise
  $ git checkout -b exercise
- examine the firewall role
  - edit the tasks to use filters
    - to set default values for variables
      state: "{{ item['state'] | default('enabled') }}"
      zone: "{{ item['zone'] | default(omit) }}"
      protocol: "{{ item['protocol' | default('tcp') | lower }}"
- examine the deploy_apache playbook
  - change the value of the 'firewall_rules' variable
    - to use the 'template' lookup plugin
    firewall_rules: "{{ lookup('ansible.builtin.template', 'apache_firewall_rules.yml.j2') | from_yaml }}"
- examine the teamplte for apache_firewall_rules.yml.j2
  - apache_port is set in the group_vars directory
  - modify the loop to use gathered_facts
    {% for server in groups['lb_servers'] %}
    - zone: internal
      source: "{{ hostvars[server]['ansible_facts']['default_ipv4']['address'] }}"
    {% endfor %}

Chapter 8

1. run a playbook that delegates to another host
  - ansible.builtin.lineinfile module
  - add two lines in a file using variables:
    {{ ansible_facts['fqdn'] }}
    {{ '%c' | strftime(ansible_facts['date_time']['epoch'] }}
    delegate_to: workstation
2. configure parallelism using 'forks' and 'serial'
  - set forks for parallelism
    - in ansible.cfg: forks =5
    - in navigator: DEFAULT_FORKS(default) = 5
      $ ansible-navigator config [dump|list] -m stdout
  - set serial for batches
    - to limit number of hosts that run simultaneously
    - at play level, eg:
      serial: 2
      - all tasks + handlers in play are run 
      - when play completes [successful]
        - repeat on next two managed hosts
      - if play fails
        - the playbook aborts
        - does not run on remaining hosts
    - can be set a integer or percentage
    - can be set a list, eg.:
3. configure rolling updates
  - run a playbook withc unequal batch size
  - abort on too many failes
  - run specific task once per batch
  - inventory has 5 hosts
    play sets
    serial:
      - 1
      - 25%
      - 100%
    - 1 of 5 == 1
    - 25% of 5 == 1.25 -> 1
    - 100% of 5 == 5 ; only 3 remaining, so 3 it is
  - specify failure tolerance
      max_fail_percentage: 30%
      - when serial: 2
        - 30% of an inventory of 2 is 0.6 == a single host failure causes abort
      - when [next] serial: 10%
        - 30 % of 10 is 3 == more than 3 host failures must occur to abort
      - "fail fast" == max_fail_percentage: 0
  - running a task once
    - run task once for the entire batch
    - insted of for each host in the batch
    run_once: true

LAB:
. delegate tasks to other hosts [delegate_to: ]
. implement deployment batches [serial: ]
. limit failure [max_fail_percentage: ]
- clone git repo, cd into it, create branch
- install required collections
  - get token from hub
    - login https://hub.lab.example.com
    - > Collections > API token > Load token > copy it
  - use token to update token option in ansible.cfg
    [<somerepo>]
    token=<tokenstring>
  - use ansible-galaxy to install collections in collections dir
    $ ansible=galaxy galaxy install -r collections/requirements.yml -p collections/
- add a pre_tasks section
  - to disable webservers on the haproxy loadbalancer
    - use community.general.haproxy module
    - disable host using inventory_hostname var
    - delegate to the loadbalancer
      - {{ groups['lb_servers'][0] }} provides the name of the loadbalancer
- modify update_webapp.yml playbook
  - use delegation
  - modify the 'smoke test'
  - so that each request originates from the loadbalancer
- add post_tasks section
  - to re-enable each webserer on the haproxy loadbalancer
  - similar to the pre_tasks
    - enabled instead of disabled
- configure to run tasks in batches
  - no more than three batches
    - 5%
    - 35%
    - all remaining
  - add key to stop execution if any host fails a task

Chapter 9
1. create a content collection an publish it to private automation hub
- create workdir, got into it
- create collection
  $ ansible-galaxy collection init student.collection
- specify toe use Ansible 2.9.10
  $ vi meta/runtime.yml
    ---
    requires_ansible: '>=2.9.10'
- place module in this collection, use provided myping.py
  $ cp myping.py plugins/modules
- create role inside the collections
  $ cd roles/
  $ ansible-galaxy role init mymotd
- create a template in the role
- create a task in the role based on the template
- delete unneeded files
- build the collection
  $ ansible-galaxy collection build
- create 'student' namespace in pr.aut.hub, upload and approve the collection
  - https://hub.lab.example.com
    > Collections > Namespaces > Create
    ...
    > Upload
    > Collections > Approve
- install student.testcollection from pr.aut.hub
  - copy published repo config from pr.aut.hub
    - > Collections > Repository Management
      - copy CLI config
      - paste in your ansible.cfg
        [galaxy_server.published_repo]
        url=<some url>
        token=
  - copy API token from pr.aut.hub
    > Collections > API token management > Load token > Copy
      - add token in ansible.cf [see above]
  - this project uses a requirements file [collections/requirements.yml]
    ---
    collections:
      - name: student.testcollection
  - install
    $ ansible-galaxy collection install -r collections/requirements.yml -p collections

2. create a custom automation execution environment
- that provides a specific collection
- re-use previous motd code
- create configfiles for new aut.ex.env
  $ mkdir $ cd
  $ vi execution-environment.yml
  - use ee-minimal-rhel8 latest
- create requirements.yml file to add the motd collection
- create requiremenst.txt file for Python dependencies
  - needs funmotd
- create bindep.txt for system-level dependencies
- verify that ansible-builder is installed
  $ rpm -qa |grep ansible
  $ sudo yum install ansible-builder
- create the automation execution environment
  $ ansible-builder create
    - creates _build directory
    - creates context/Containerfile
- copy motd.tar.gz to _build/ directory
- login to automation hub
- build the custom aut.ex.env
  $ ansible-builder build -t ee-motd-minimal:1.0
  hv: this runs: 'podman build -f context/Containerfile -t ee-motd-minimal:1.0 context'
- list images
  $ podman images localhost/ee-motd-minial
- examine the image using navigator
  $ ansible-navigator images --pp never --eei localhost/ee-motd-minimal:1.0
    - inspect it

3. validating a custom execution environment
- re-use motd code
- run code using default ex.env
  $ ansible-navigator run motd-test.yml -m stdout
  - fails
  - exercise.motd.banner role is not installed
- re-run with the custom ex.env
  $ ansible-navigator run motd-test.yml -eei localhost/ee-motd-minimal -pp never -pae false -k -m stdout
- publish the ex.env
  - tag a label to the image
    $ podman tag localhost/ee-motd-minimal hub.lab.example.com/ee-motd-minimal
  - login to priv.aut.hub
    $ podman login hub.lab.example.com
  - push the image to prib.aut.hub
    $ podman push hub.lab.example.com/ee-motd-minimal
- verify that the image can be retrieved [on servere vm]
  - add servere to the inventory
  - re-run playbook for servere
    $ ansible-navigator run motd-test.yml -eei hub.lab.exanple.com/ee-motd-minimal -pp always -pae false -k -m stdout
  - login to server to see motd working

4. using custom collections and execution environments in automation controller
- by using a requirements file
- publish the provided content collection on priv.aut.hub
  - create Namespace
    - https://hub/lab.example.com
    - login user:redhat123
    > Collections > Namespaces > Create
    > Upload
    > Collections > Approval > Approve
  - create project from automation controller UI
    > Resources > Project > Add
      - Name
      - Organization
      - Source Control Type
      - Source Control URL
      - Source Control Credential
- check current motd on some systems
- create a job template to run the motd-test.yml from the Project
  > Resources > Templates
    > Add > Add job
    ! @Limit: servera.lab.example.com
    > Launch
- add new exec.env using the UI
  > Administration > EXecution Environments > Add
- add new automation controller proect that uses the exercise.motd collection
  > Resources > Projects > Add
- Create job template to use the custom exec.env


