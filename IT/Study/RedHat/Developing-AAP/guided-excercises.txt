Chapter 1

1. use automation content navigator to run a playbook and review results
.install ansible-navigator package
  prereq:
  - registered system
    # subscription-manager register
  - repo enabled
    # subscription-manager repos --enable ansible-automation-platform-2.2-for-rheo8-x86_64-rpms

  $ sudo yum install ansible-navigator

.install podman
  $ podman login <automationhub>
    Username:
    Password:
    Login Succeeded!

.write and run playbooks
  $ ansible-navigator run <playbook.yml> -m stdout -eei <execution env>

2.clone an existing GIT repo, edit files, commit changes, push to repo
. create workdir
  $ mkdir -p ~/git-repos
  $ cd $_
. clone repo
  $ git clone https://<url.git>
  of
  $ git clone git://<url.git>
. create exercise branch
  $ cd <somedir>
  $ git checkout -b exercise
  Switched to a new branch 'exercise'
. configure global settings
  $ git config --global user.name 'My Name'
  $ git config --global user.email myname@my.domain.local
  extra:
  $ git config --global push.default simple
  $ git config --global credential.https://git.lab.example.com student
  $ git config --global credential.helper cache --timeout=7200
. create basic ansible config files
  .ansible.cfg
    [defaults]
    inventory = inventory
    remote_user = devops
  .inventory
    [webservers]
    serverd
. review current status of local Git repo
  $ git status
. add your new files
  $ git add playbook.yml ansible.cfg inventory
. commit
  $ git commit -am "blah"
. push
  $ git push -u origin exercise
.run the playbook
  .login to automationhub
  $ podman login <automationhub>
  .run the playbook
  $ ansible-navigator run playbook.yml -eei ee-supported-rhel8:latest
.create gitignore for naviator output files
  $ vi .gitignore
    ansible-navigator.log
    *-artifact-*
  $ git add .gitignore
  $ git commit -am "blah"
  $ git push

3.apply recommended practices to an exisiting Ansible automation project
- create a name on the second play
- move the listed hosts to a hostgroup in the inventory
- run the play against 'hosts: dbservers'
- use more meaningful names for variables
- use ansible module instead of command/shell

Chapter 2

1.write a playbook that uses modules from an AnsibleContentCollection
. find the module 
  .login to automationhub
  $ podman login hub.example.lab.com
  $ ansible-doc -l | grep firewalld
  hv: fails
  $ ansible-navigator doc -m stdout -l
    .type '/firewalld' to search
  $ ansible-navigator doc -m stdout ansible.posix.firewalld
    .use this FQCN
