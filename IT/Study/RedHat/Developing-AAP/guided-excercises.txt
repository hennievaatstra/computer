Chapter 1

1. use automation content navigator to run a playbook and review results
.install ansible-navigator package
  prereq:
  - registered system
    # subscription-manager register
  - repo enabled
    # subscription-manager repos --enable ansible-automation-platform-2.2-for-rheo8-x86_64-rpms

  $ sudo yum install ansible-navigator

.install podman
  $ podman login <automationhub>
    Username:
    Password:
    Login Succeeded!

.write and run playbooks
  $ ansible-navigator run <playbook.yml> -m stdout -eei <execution env>

2.clone an existing GIT repo, edit files, commit changes, push to repo
. create workdir
  $ mkdir -p ~/git-repos
  $ cd $_
. clone repo
  $ git clone https://<url.git>
  of
  $ git clone git://<url.git>
. create exercise branch
  $ cd <somedir>
  $ git checkout -b exercise
  Switched to a new branch 'exercise'
. configure global settings
  $ git config --global user.name 'My Name'
  $ git config --global user.email myname@my.domain.local
  extra:
  $ git config --global push.default simple
  $ git config --global credential.https://git.lab.example.com student
  $ git config --global credential.helper cache --timeout=7200
. create basic ansible config files
  .ansible.cfg
    [defaults]
    inventory = inventory
    remote_user = devops
  .inventory
    [webservers]
    serverd
. review current status of local Git repo
  $ git status
. add your new files
  $ git add playbook.yml ansible.cfg inventory
. commit
  $ git commit -am "blah"
. push
  $ git push -u origin exercise
.run the playbook
  .login to automationhub
  $ podman login <automationhub>
  .run the playbook
  $ ansible-navigator run playbook.yml -eei ee-supported-rhel8:latest
.create gitignore for naviator output files
  $ vi .gitignore
    ansible-navigator.log
    *-artifact-*
  $ git add .gitignore
  $ git commit -am "blah"
  $ git push

3.apply recommended practices to an exisiting Ansible automation project
- create a name on the second play
- move the listed hosts to a hostgroup in the inventory
- run the play against 'hosts: dbservers'
- use more meaningful names for variables
- use ansible module instead of command/shell

Chapter 2

1.write a playbook that uses modules from an AnsibleContentCollection
. find the module 
  .login to automationhub
  $ podman login hub.example.lab.com
  $ ansible-doc -l | grep firewalld
  hv: fails
  $ ansible-navigator doc -m stdout -l
    .type '/firewalld' to search
  $ ansible-navigator doc -m stdout ansible.posix.firewalld
    .use this FQCN

Chapter 3
1. navigate through the automation controller webUI and launch a job
- create a 'source control credential' [for the Git repo]
  - navigate to controller
  - login as admin:redhat
  - > Resources Credentials > Add
    > Name | Organization | Credential Type | Username | SCM Private Key
- create a machine credential [to run against hosts]
  - > Resources > Credentials > Add
    > Name | Organization | Cred.type | Username |
       SSHPrivateKey | Priv.Esc.Method | Pric.Esc.Username
- create a project
  - points to a Git repo
  - that contains a playbook
  - and an inventory
  - > Resources > Projects > Add
    > Name | Organization | Exec.Env | SRC.Type | SRC.URL |
       SRC.Cred | Options
- create an inventory
- create a template

Chapter 4
1. browse current configuration
  $ ansible-navigator config --eei <ee> --pp missing
  hv: 'inventory' can be found at 'Default host list'

2. change settings for automation controller
- modify ansible.cfg
  - specify new passwd
  hv:
  - ansible-navigator [also] uses ansible.cfg in current/projectdir
  - a non-default value in ansible.cfg shows up yellow in ansible-navigator
  - a default value set in ansible.cfg ALSO shows up yellow in ansible-navigator
  - default values are green when not present in ansible.cfg
  > create a secret-pass with password in plaintext
  > set this file in ansible.cfg as vault_password_file
    - or user vault-password-file=<file> on CLI
  > create&copy passwdhash using mkpasswd cmd
  > create ansible vault file
    username: joe
    pwhash: <hash from above>
  > create playbook for user creating
    username: "{{ username }}"
    password: "{{ pwhash }}"
- generate ansible-navigator settings file
  $ ansible-navigator settings --effective > sample.yml
  $ mv sample.yml ansible-navigator.yml

Chapter 5
1. install custom scripts that dynamically generate a list of inventory hosts
  hv: scripts are redhat training custom
  - create a directory for the exercise and enter it
  - create an inventory directory and an inventory in it
    $ mkdir inventory
    $ vi inventory/hosts
  - create a static parent group 'servers'
    [servers:children]
    webserver
  - the inventorya.py dyn.inv.script
    - defines the webserver group
    - including the servera.lab.example.com host
  - the inventoryb.py dyn.inv.script
    - defines the workstation.lab.example.com host
  - move the dyn.inv.scripts in the inventory dir
  - set x-bits
    hv: no x-bit == it's source as INI file, which also fails
  - check:
  $ ansible-navigator inventory -m stdout --list
  $ ansible-navigator inventory -m stdout --graph

2. convert an INI style inventory 
    [webservers]
    servera.lab.example.com
    serverb.lab.example.com
   to a YAML style inventory
    webserver:
      hosts:
        servera.lab.example.com:
        servera.lab.example.com:
    note:
    - the : after the hostname
    - use wildcards server[a:b].lab.example.com: to group

3. setup directories for multiple host variable files
   - in supplied playbook
     - one play for hosts: lb_servers
     - two tasks
     - each task has a vars: declaration
     > move vars into inventory variable files
   - create directory
     $ mkdir group_vars/lb_servers
   - create vars files
     $ vi group_vars/lb_servers/haproxy.yml
     ---
     ha_proxy_appservers:
        - name: serverb.lab.example.com
          ip: 172.25.250.11
   - repeat for webservers

Chapter 6
1. select the/an appropriate escalation method and privilege isolation
- clone GIT repo
- create new branch and check it out
  $ git checkout -b exercise
- privilege escalation is disabled
  - action with root access will fail
- review playbook
  - install httpd and firewalld
    - firewalld not on rocky91 lab for ansible
    - available on rocky91 aap [navigator]
    $ ansible-galaxy collection install ansible.posix
  - running playbook on CLI fails
  - adding -b will work
- privilege escalation using a block
  - create as new task:
    name: Block task
    become: true
    block:
  - then indent parts to be included
2. use [pre|post]_tasks
- to control whether tasks run before/after roles
- use 'listen' directives to notify mulitple handlers at the same time
- pre_tasks are run before the role
3. use handlers
- handlers are called by the 'notify:' directive

LAB:
Enable the timer and profile_tasks callback plug-ins for the playbook. The two plug-ins are part of the ansible.posix collection. If desired, then you can specify the FQCNs for the callback plug-ins.

Edit the ansible.cfg configuration file and add the plug-ins to the callbacks_enabled directive. The modified file contains the following content:

[defaults]
inventory=inventory
remote_user=devops
callbacks_enabled=ansible.posix.timer,ansible.posix.profile_tasks
- hv: memorize the callbacks config line
