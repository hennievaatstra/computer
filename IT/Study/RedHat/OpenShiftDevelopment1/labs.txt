Chapter 2

Lab: Podman Basics
Use Podman to manage local containers.

Outcomes

You should be able to:

Manage local containers.

Copy files in and out of containers.

Run a set of application containers that connect to one another via a Podman network.

Forward a port from a container so that it is accessible from the host machine.

As the student user on the workstation machine, use the lab command to prepare your system for this exercise.

This command starts the basics-podman-secret local container, and copies the necessary files for this lab. The command also verifies that Podman is available and can pull from the required registries. You can find the source code for the basics-podman-secret container in the $HOME/DO188/solutions/basics-podman/secret-container directory.

The lab script continuously evaluates the objectives of this lab. Keep the script running in a terminal window, and complete the objectives of this lab from a new terminal window.

After each objective, return to the lab script evaluation to see if you have finished the objective successfully. When you have finished all of the objectives, the lab command prompts you to execute the finish function.

[student@workstation ~]$ lab start basics-podman
Instructions

The lab command starts the basics-podman-secret container, which contains the /etc/secret-file file.

Copy the /etc/secret-file file from the container to the $HOME/DO188/labs/basics-podman/solution file.

Start a new container with the following parameters:

Name: basics-podman-server

Image: registry.ocp4.example.com:8443/ubi8/httpd-24

Ports: Route traffic from port 8080 on your machine to port 8080 inside of the container

Network: lab-net

You can start the container in the detached mode for greater convenience.

Create the lab-net Podman network.

[student@workstation ~]$ podman network create lab-net
lab-net
The next objective of the lab script is passing.

Execute the podman run command to start the container.

[student@workstation basics-podman]$ podman run -d --name basics-podman-server \
--net lab-net -p 8080:8080 registry.ocp4.example.com:8443/ubi8/httpd-24
8b747...3616
Additional objectives of the lab script are passing.

Copy the $HOME/DO188/labs/basics-podman/index.html file to /var/www/html/ in the basics-podman-server container.

Verify that you are in the correct directory.

[student@workstation basics-podman]$ ls
index.html  solution
Copy the index.html file in to the container.

[student@workstation basics-podman]$ podman cp index.html \
basics-podman-server:/var/www/html/
In a web browser, navigate to localhost:8080 and verify that you see the Hello from Podman Basics lab text.

The next objective of the lab script is passing.

Start a new container with the following parameters:

Name: basics-podman-client

Image: registry.ocp4.example.com:8443/ubi8/httpd-24

Network: lab-net

You can start the container in the detached mode for greater convenience.

Execute the podman run command to start the container.

[student@workstation basics-podman]$ podman run -d --name basics-podman-client \
--net lab-net registry.ocp4.example.com:8443/ubi8/httpd-24
8b747...3616
Confirm that the basics-podman-client container can access the basics-podman-server container by its DNS name. Use the podman exec and curl commands to make a request to the basics-podman-server container at port 8080 from the basics-podman-client container.

Confirm that DNS is enabled on the lab-net network.

[student@workstation basics-podman]$ podman network inspect lab-net
...output omitted...
          "dns_enabled": true,
...output omitted...
Use the curl command inside of the basics-podman-client to confirm that the basics-podman-server container is accessible from the lab-net network by its DNS name.

[student@workstation basics-podman]$ podman exec basics-podman-client \
curl -s http://basics-podman-server:8080 && echo
<h1>Hello from Podman Basics lab</h1>
All remaining objectives are passing.

Finish

As the student user on the workstation machine, change to the student user home directory and use the lab command to complete this exercise. This is important to ensure that resources from previous exercises do not impact upcoming exercises.

Press y when the lab start command prompts you to execute the finish function. Alternatively, execute the following command:

[student@workstation ~]$ lab finish basics-podman

---
Chapter 3
Lab: Container Images
Use Podman to create and pull an image from a container registry.

Outcomes

You should be able to:

Create a container image from a Containerfile by using Quay.

Pull an image from the Quay container registry.

Add a tag to a container image.

As the student user on the workstation machine, use the lab command to prepare your system for this exercise.

This command verifies that Podman is available and provides a Containerfile template.

The lab script continuously evaluates the objectives of this lab. Keep the script running in a terminal window and complete the objectives of this lab from a new terminal window.

After each objective, return to the lab script evaluation to see if you have finished the objective successfully. When you finish all objectives, the lab command prompts you to execute the finish function.

[student@workstation ~]$ lab start images-lab
Instructions

Build a container image that uses the ~/DO188/labs/images-lab/Containerfile file.

Call the resulting image images-lab and push the image into the registry.ocp4.example.com:8443 registry in the developer user repository.

Use the developer user with the developer password to authenticate with the registry.ocp4.example.com:8443 registry.

Authenticate Podman with the registry.ocp4.example.com:8443 registry.

[student@workstation ~]$ podman login -u developer -p developer \
 registry.ocp4.example.com:8443
Login Succeeded!
In a terminal, change into the ~/DO188/labs/images-lab directory.

[student@workstation ~]$ cd ~/DO188/labs/images-lab
no output expected
Build the Containerfile with the registry.ocp4.example.com:8443/developer/images-lab container image name.

[student@workstation images-lab]$ podman build --file Containerfile \
  --tag registry.ocp4.example.com:8443/developer/images-lab
...output omitted...
Successfully tagged registry.ocp4.example.com:8443/developer/images-lab:latest
8d14...dd5a
Push the image to the registry.ocp4.example.com:8443 registry.

[student@workstation images-lab]$ podman push \
  registry.ocp4.example.com:8443/developer/images-lab
...output omitted...
Writing manifest to image destination
Storing signatures
Add the grue tag to the images-lab container image, and push it to the registry.ocp4.example.com:8443 registry.

Add the grue tag to the image.

[student@workstation images-lab]$ podman tag \
  registry.ocp4.example.com:8443/developer/images-lab \
  registry.ocp4.example.com:8443/developer/images-lab:grue
no output expected
Push the new image tag.

[student@workstation images-lab]$ podman push \
  registry.ocp4.example.com:8443/developer/images-lab:grue
...output omitted...
Writing manifest to image destination
Storing signatures
Create a container by using the images-lab:grue image. Use the images-lab container name, and bind the 8080 container port to the 8080 host port. Start the container in the background.

Optionally, use the curl command to verify that the HTTP server is running.

Start the container.

[student@workstation images-lab]$ podman run -d --name images-lab \
-p 8080:8080 images-lab:grue
2422...e7b1
Connect to the HTTP server by using curl. Note that this step is not required to make the lab script pass.

[student@workstation images-lab]$ curl localhost:8080
It is pitch black. You are likely to be eaten by a grue.
Finish

As the student user on the workstation machine, use the lab command to complete this exercise. This is important to ensure that resources from previous exercises do not impact upcoming exercises.

Press y when the lab start command prompts you to execute the finish function. Alternatively, execute the following command:

[student@workstation ~]$ lab finish images-lab

---
Chapter 4
Lab: Custom Container Images
Complete the Containerfile for an application that generates a QR code from a given text.

Outcomes

You should be able to:

Understand multistage builds.

Run commands within a container.

Set environment variables.

Set a working directory.

Set an entry point.

Change the user that executes commands.

As the student user on the workstation machine, use the lab command to prepare your system for this exercise.

[student@workstation ~]$ lab start custom-lab
The start command copies a Node.js application, which generates a QR code from a given text, to the labs/custom-lab directory of your workspace. The command also generates an .npmrc file that configures the Node.js application to use an internal NPM registry.

The lab script continuously evaluates the objectives of this lab. Keep the script running in a terminal window and complete the objectives of this lab from a new terminal window.

The application contains a Containerfile that you must complete throughout this exercise. The Containerfile uses a multistage build. The first stage uses the registry.ocp4.example.com:8443/redhattraining/podman-certificate-generator image to generate self-signed certificates.

In the second stage, the application uses the certificates to enable a TLS connection.

Instructions

Navigate to the ~/DO188/labs/custom-lab directory, which contains the application that converts a text into a QR code image. Then, run the app on the host machine by using the npm install and npm start commands. Verify that the application fails gracefully because an environment variable is missing.

Navigate to the ~/DO188/labs/custom-lab directory.

[student@workstation ~]$ cd ~/DO188/labs/custom-lab
no output expected
Install the application dependencies.

[student@workstation custom-lab]$ npm install

added 201 packages, and audited 202 packages in 1s
...output omitted...
Start the application. The application exits because the HTTP port is not set.

[student@workstation custom-lab]$ npm start

> custom-images-lab@1.0.0 start
> node index.js

HTTP PORT not found. Set the env variable to proceed.
In the build stage of the Containerfile, generate the TLS certificates by using the ./gen_certificates.sh command.

The ./gen_certificates.sh command is included in the provided container.

Use the RUN instruction to generate the TLS certificates.

FROM registry.ocp4.example.com:8443/redhattraining/podman-certificate-generator as certs

RUN ./gen_certificates.sh

FROM registry.ocp4.example.com:8443/ubi9/nodejs-18:1
USER root
RUN groupadd -r student && useradd -r -m -g student student && \
    npm config set cache /tmp/.npm --global

COPY --from=certs --chown=student:student /app/*.pem /etc/pki/tls/private/certs/
COPY --chown=student:student . /app/
In the final stage of the Containerfile, set the following environment variables:

TLS_PORT=8443 (the port for TLS traffic)

HTTP_PORT=8080 (the port for HTTP traffic)

CERTS_PATH=/etc/pki/tls/private/certs (the path that contains the TLS certificates)

Build the container image with the name localhost/podman-qr-app.

Use the ENV instruction to add the environment variables to the Containerfile.

FROM registry.ocp4.example.com:8443/redhattraining/podman-certificate-generator as certs

RUN ./gen_certificates.sh

FROM registry.ocp4.example.com:8443/ubi9/nodejs-18:1
USER root
RUN groupadd -r student && useradd -r -m -g student student && \
    npm config set cache /tmp/.npm --global

COPY --from=certs --chown=student:student /app/*.pem /etc/pki/tls/private/certs/
COPY --chown=student:student . /app/

ENV TLS_PORT=8443 \
    HTTP_PORT=8080 \
    CERTS_PATH="/etc/pki/tls/private/certs"
Build the container image.

[student@workstation custom-lab]$ podman build -t localhost/podman-qr-app .
...output omitted...
Successfully tagged localhost/podman-qr-app:latest
201...cc8
In the final stage of the Containerfile, set the working directory of the application to the /app path.

Then, build the container image with the name localhost/podman-qr-app.

Use the WORKDIR instruction to define the working directory.

FROM registry.ocp4.example.com:8443/redhattraining/podman-certificate-generator as certs

RUN ./gen_certificates.sh

FROM registry.ocp4.example.com:8443/ubi9/nodejs-18:1
USER root
RUN groupadd -r student && useradd -r -m -g student student && \
    npm config set cache /tmp/.npm --global

COPY --from=certs --chown=student:student /app/*.pem /etc/pki/tls/private/certs/
COPY --chown=student:student . /app/

ENV TLS_PORT=8443 \
    HTTP_PORT=8080 \
    CERTS_PATH="/etc/pki/tls/private/certs"

WORKDIR /app
Build the container image.

[student@workstation custom-lab]$ podman build -t localhost/podman-qr-app .
...output omitted...
Successfully tagged localhost/podman-qr-app:latest
201...cc8
In the final stage of the Containerfile, set the student user as the user that runs the application. The student user exists in the Containerfile.

Then, build the container image with the name localhost/podman-qr-app.

Use the USER instruction.

FROM registry.ocp4.example.com:8443/redhattraining/podman-certificate-generator as certs

RUN ./gen_certificates.sh

FROM registry.ocp4.example.com:8443/ubi9/nodejs-18:1
USER root
RUN groupadd -r student && useradd -r -m -g student student && \
    npm config set cache /tmp/.npm --global

COPY --from=certs --chown=student:student /app/*.pem /etc/pki/tls/private/certs/
COPY --chown=student:student . /app/

ENV TLS_PORT=8443 \
    HTTP_PORT=8080 \
    CERTS_PATH="/etc/pki/tls/private/certs"

WORKDIR /app

USER student
Build the container image.

[student@workstation custom-lab]$ podman build -t localhost/podman-qr-app .
...output omitted...
Successfully tagged localhost/podman-qr-app:latest
201a...ecc8
In the final stage of the Containerfile, run the npm install --omit=dev command to install the production dependencies of the Node.js application.

Then, build the container image with the name localhost/podman-qr-app.

Use the RUN instruction to execute the command.

FROM registry.ocp4.example.com:8443/redhattraining/podman-certificate-generator as certs

RUN ./gen_certificates.sh

FROM registry.ocp4.example.com:8443/ubi9/nodejs-18:1
USER root
RUN groupadd -r student && useradd -r -m -g student student && \
    npm config set cache /tmp/.npm --global

COPY --from=certs --chown=student:student /app/*.pem /etc/pki/tls/private/certs/
COPY --chown=student:student . /app/

ENV TLS_PORT=8443 \
    HTTP_PORT=8080 \
    CERTS_PATH="/etc/pki/tls/private/certs"

WORKDIR /app

USER student

RUN npm install --omit=dev
Build the container image.

[student@workstation custom-lab]$ podman build -t localhost/podman-qr-app .
...output omitted...
Successfully tagged localhost/podman-qr-app:latest
201...cc8
In the final stage of the Containerfile, make npm start the default command for this image. Additional runtime arguments should not override the default command.

Then, build the container image with the name localhost/podman-qr-app.

Use the ENTRYPOINT instruction to execute the command when the container is started.

FROM registry.ocp4.example.com:8443/redhattraining/podman-certificate-generator as certs

RUN ./gen_certificates.sh

FROM registry.ocp4.example.com:8443/ubi9/nodejs-18:1
USER root
RUN groupadd -r student && useradd -r -m -g student student && \
    npm config set cache /tmp/.npm --global

COPY --from=certs --chown=student:student /app/*.pem /etc/pki/tls/private/certs/
COPY --chown=student:student . /app/

ENV TLS_PORT=8443 \
    HTTP_PORT=8080 \
    CERTS_PATH="/etc/pki/tls/private/certs"

WORKDIR /app

USER student

RUN npm install --omit=dev

ENTRYPOINT npm start
Build the container image.

[student@workstation custom-lab]$ podman build -t localhost/podman-qr-app .
...output omitted...
Successfully tagged localhost/podman-qr-app:latest
201...cc8
Start the podman-qr-app container. Call the container custom-lab and forward ports 8080 and 8443.

Use the podman run command to start the application and bind the corresponding ports.

[student@workstation custom-lab]$ podman run --name=custom-lab \
 -p 8080:8080 -p 8443:8443 podman-qr-app
...output omitted...
TLS Server running on port 8443
Server running on port  8080
Optionally, test the application by navigating to http://localhost:8080 in a web browser.

Finish

As the student user on the workstation machine, use the lab command to complete this exercise. This is important to ensure that resources from previous exercises do not impact upcoming exercises.

Press y when the lab start command prompts you to execute the finish function. Alternatively, execute the following command:

[student@workstation ~]$ lab finish custom-lab

---
Chapter 5
Lab: Persisting Data
Use volumes to provide persistence to an application.

Outcomes

You should be able to create volumes, import data into volumes, and use volumes in an application.

This lab uses a URL shortener application, which consists of three components: a database container, a back-end container, and a front-end container.

The source code for the front end and back end is available at ~/DO188/solutions/persisting-lab after you execute the lab script.

Note the following:

The back-end container uses the following information:

The back end uses default values for the user, password, and database for simplicity.

The back end uses the database container name to resolve the database IP address. Do not change the database container name.

The front-end container uses the following information:

The front end uses an Nginx server to redirect requests from localhost:8080 to the persisting-backend:8080 host. Do not change the back-end container name.

If the front end exits after start, execute podman logs persisting-frontend to check the logs.

The application can become unresponsive after you stop individual containers. If this happens, stop all containers and start the containers in order of database, back end, and front end.

As the student user on the workstation machine, use the lab command to prepare your system for this exercise.

[student@workstation ~]$ lab start persisting-lab
The lab script continuously evaluates the objectives of this lab. Keep the script running in a terminal window and complete the objectives of this lab from a new terminal window.

Instructions

Create a named volume with the following parameters:

The volume is called postgres-vol.

The volume contains the contents of the ~/DO188/labs/persisting-lab/postgres-vol.tar.gz file.

Create the volume.

[student@workstation ~]$ podman volume create postgres-vol
postgres-vol
Import the ~/DO188/labs/persisting-lab/postgres-vol.tar.gz file to the volume:

[student@workstation ~]$ podman volume import postgres-vol \
~/DO188/labs/persisting-lab/postgres-vol.tar.gz
...no output expected...
Start the application database container with the following parameters:

Call the container persisting-db.

Start the container in the background.

Connect the container to the persisting-net network.

Use the following environment variables:

POSTGRESQL_PASSWORD=pass

POSTGRESQL_USER=user

POSTGRESQL_DATABASE=db

Mount the postgres-vol volume to the /var/lib/pgsql/data directory.

Use the registry.ocp4.example.com:8443/rhel9/postgresql-13:1 image.

Create the persisting-net network.

[student@workstation ~]$ podman network create persisting-net
persisting-net
Start the database container.

[student@workstation ~]$ podman run --name persisting-db -d \
 --net persisting-net -e POSTGRESQL_USER=user -e POSTGRESQL_PASSWORD=pass \
 -e POSTGRESQL_DATABASE=db \
 --mount='type=volume,src=postgres-vol,dst=/var/lib/pgsql/data' \
 registry.ocp4.example.com:8443/rhel9/postgresql-13:1
c97f...4a29
Start the back end with the following parameters:

Call the container persisting-backend.

Start the container in the background.

Use the environment variable DB_HOST=persisting-db.

Expose the port 8080 on the machine to route requests to port 8080 inside the container.

Connect the container to the persisting-net network.

Use the registry.ocp4.example.com:8443/redhattraining/podman-urlshortener-backend image.

[student@workstation ~]$ podman run --name persisting-backend -d \
 -e DB_HOST=persisting-db -p 8080:8080 --net persisting-net \
 registry.ocp4.example.com:8443/redhattraining/podman-urlshortener-backend
3a46...4e60
Start the front end with the following parameters:

Call the container persisting-frontend.

Start the container in the background.

Connect the container to the persisting-net network.

Expose the port 3000 on the machine to route requests to port 8080 inside the container.

Use the registry.ocp4.example.com:8443/redhattraining/podman-urlshortener-frontend image.

[student@workstation ~]$ podman run --name persisting-frontend -d \
  --net persisting-net -p 3000:8080 \
  registry.ocp4.example.com:8443/redhattraining/podman-urlshortener-frontend
b10e...940f
Test the application.

In a web browser, verify the functionality of the application at http://localhost:3000.

In a web browser, test the database data import by navigating to http://localhost:8080/api/shorturl/a9yi4rcl5uuzunv.

The a9yi4rcl5uuzunv short URL is a part of the database data that you imported in a previous step into the postgres-vol volume.

Finish

As the student user on the workstation machine, use the lab command to complete this exercise. This is important to ensure that resources from previous exercises do not impact upcoming exercises.

Press y when the lab start command prompts you to execute the finish function. Alternatively, execute the following command:

[student@workstation ~]$ lab finish persisting-lab
