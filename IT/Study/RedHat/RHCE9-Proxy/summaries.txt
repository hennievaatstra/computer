Summaries

Chapter 1 - Introducing Ansible
- Automation is a key tool to mitigate human error and quickly ensure that your IT infrastructure is in a consistent, correct state
- Ansible is an open source automation platform that can adapt to many different workflows and environments
- Ansible can be used to manage many different types of systems, including servers running Linux, Microsoft Windows, or UNIX and network devices
- Ansible Playbooks are human-readable text files that describe the desired state of an IT infrastructure
- Ansible is built around an agentless architecture in which Ansible is installed on a control node and clients do not need any special agent software
- Ansible connects to managed hosts using standard network protocols such as SSH, and runs code or commands on the managed hosts to ensure that they are in the state specified by Ansible

Chapter 2 - Implementing an Ansible Playbook
- A play is an ordered list of tasks, which runs against hosts selected from the inventory
- A playbook is a text file that contains a list of one or more plays to run in order
- Ansible Playbooks are written in YAML format
- YAML files are structured using space indentation to represent the data hierarchy
- Tasks are implemented using standardized code packaged as Ansible modules
- The ansible-doc command can list installed modules, and provide documentation and example code snippets of how to use them in playbooks
- The ansible-playbook command is used to verify playbook syntax and to run playbooks

Chapter 3 - Managing Variables and Facts
- Ansible variables allow administrators to reuse values across files in an entire Ansible project
- Variables can be defined for hosts and hostgroups in the inventory file
- Variables can be defined for playbooks by using facts and external files, they can also be defined on the command line
- The register keyword can be used to capture the output of a command in a variable
- Ansible Vault is one way to protect sensitive data such as password hashes and private keys for deployment using Ansible playbooks
- Ansible facts are variables that are autoamtically discovered by Ansible from a managed host

Chapter 4 - Implementing Task Control
- Loops are used to iterate over a set of values, for example, a list of strings, or a list of either hashes or dictionaries
- Conditionals are used to execute tasks or plays only when certain conditions have been met
- Handlers are special tasks that execute at the end of the play if notified by other tasks
- Handlers are only notified when a task reports that it changed something on a managed host
- Tasks are configured to handle error conditions by ignoring task failure, forcing handlers to be called even if the task failed, mark a task as failed when it suceeded, or override the behavior that causes a task to be marked as changed
- Blocks are used to group tasks as a unit and to execute other tasks depending upon whether or not all tasks in the block succeed

Chapter 5 - Deploying Files to Managed Hosts
- The file management modules in the ansible.builtin and ansible.posix Ansible Content Collections enable you to accomplish most tasks related to file management, such as creating, editing and modifying permissions and other attributes of files
- Several file management modules can set the permissions mode and SELinux context for files
- You can use Jinja2 templates to dynamically construct files for deployment
- A Jinja2 template is usually composed of two elements: variables and expressions. Those variables and expressions are replaced with values when the Jinja2 template is rendered
- You use the ansible.builtin.template module to deploy Jinja2 templates to managed hosts
- Jinja2 filters transform template expressions from one kind or format of data into another

Chpater 6 - Managing Complex Plays and Playbooks
- Host patterns are used to specify the managed hosts to be targeted by plays
- You can specify a list of multiple host patterns in the hosts directive of a play
- You can use the import_playbook feature to incorporate external play files into playbooks
- You can use the include_tasks or import_tasks features to incorporate external task files into playbooks
- When you include content, Ansible processes it dynamically as content is reached
- When you import content, Ansible preprocesses it before the run starts

Chapter 7 - Simplifying Playbooks with Roles and Ansible Content Collections
- Ansible Roles helps you to reuse and share Ansible code
- Ansible Content Collections distribute related roles, modules and other Ansible plugins that you can use in ansible projects and automations execution environments
- You use the ansible-galaxy command to manage Ansible Roles and Ansible Content Collections
- RedHat provides Collections through a cloud-based service: automation-hub. RedHat and partners support these
- You can distribute RedHat Collections or your own Collections from an on-premise private automation hub
- Ansible Galaxy provides a library of third-party Ansible Roles and Collections that are managed by the community and unsupported by RedHat
- System Roles (redhat.rhel_system_roles) are provided as an RPM package or as an Ansible Content Collection that consists of several roles intended to help you configure managed host subsystems on multiple versione of RHEL
- Roles and Collections that a project needs can be specified by requirements.yml files, and can be installed in your Ansible project manually by using the ansible-galaxy command

Chapter 8 - Troubleshooting Ansible
- The ansible-navigator command can produce playbook artifact files that store information about runs in JSON format
- Use the 'ansible-navigator replay' command to review play execution
- th ansible.builtin.debug module can provide additional debuggin information when you run a playbook (for example, the current value for a variable)
- You can specify the -v option of the 'ansible-navigator run' command one or more times to provide several levels of additional output verbosity. This is useful for debugging Ansible tasks when running a playbook
- The --check option enables Ansible modules that support check mode to display the changes to be performed, instead of applying those changes to the managed hosts
