Scrum PSPO
----------

Waterfall model:
- everything planned/designed upfront
	
Complexity
- is a specific definition
- a problem is complex if the relationship between action and reaction cannot be known in advance
- many aspects are complex:
	- market reactions
	- interactions within a team
	- technical problems arising throughout the development
Adaptive
- some problems are also adaptive
  - relationship between action and reaction changes over time
	  
Empiricism
- scrum: "our knowledge comes from experience"
- make decisions based on what we have known from experience
- we need to try [to get the experience]
- learn from the outcomes
- adjust plans [if needed]
- take nothing for granted
- requires 3 factors:
	- transparancy	- see/understand relevant things
	- inspection	- frequently take a look at things that affect our work
	- adaptation	- adjust if inspection gains insight on more successful approach

Scrum and Empiricism
- Scrum is a FRAMEWORK
	- teams are free to choose whatever approach they think is appropriate
	- 'how' the development takes place is left to the teams
- built upon the idea of empiricism
- prescribes rules/roles/values/events/artifacts
- which are designed to maximize opportunities for empiricism
- every aspect
	- aims toward fostering transparancy
	- allows for frequent inspection
	- empowers adaptation
- Scrum is NOT a process
- Scrum is NOT a methodology
- Scrum develops products in SPRINTS
	- to address complex adaptive problems, Scrum takes incremental approach
	- incremental means
		- work in cycles or 'iterations' called SPRINTS
		- in which planning/development/feedback/improvements are conducted
		- SPRINTS last at most 1 month
		- this combination ensures that LEARNING is incorporated
- Scrum is 'lightweight'
- Scrum guide is only 13 pages
- only essentials prescribed
- founded in 'lean thinking'

Scrum Team
- the essence of Scrum
- 10 people or fewer
- divided into 3 "accountabilities" [previously "roles"]
1. Product Owner
	- manages product backlog
	- determines the direction of the product development
2. Scrum Master
	- supports ProductOwner,Developers,Organization
	- by spreading Scrum
3. Developers
	- group of people for the development work
	- turn product backlog items in a working piece of product
- 3 crucial aspects
	- cross-functionality
		- ability to deliver a 'Done' product increment
		- without the need for external help
		- all skills must be present in the team
	- self-management
		- ability and empowerment to determine what to work on and how to do it
		- productowner determines the 'what'
		- developers decide on the 'how'
		- it is good practice to have teams be long-lived
		- teams composition doesn't change frequently if not needed
	- shared ownership
		- the idea that the team as a whole is responsible for the outcome
		- no titles/subteams in developers
		- everybody collectively accountable
		- all team members equally responsible for the outcome
			- no 'tech leads'
			- no 'junior-senior' hierarchy
		- ProductOwner & ScrumMaster & Developers share responsibility that the team as a whole produces a valuable product
		
	note:
	- self-management takes place within the limits set by the organization within which the development takes place

Product Owner
- often described as value maximizer or value optimizer
- responsible for determining the direction of product development
- engages with takeholders to gather feedback
- understand the product needs
- supports the product understanding of development team
- not in charge of developers
- PO is concerned with WHAT developers work on
- and to ensure they understand WHY
- PO manages the product backlog
- is the only one accountable for it
- backlog:
	- list of items that reflects what is currently known about the product
	- and the requirements that should be implemented
	- is NOT static - evolves as more is learned
	- constantly updated and reordered
	- the order reflects the 'product goal' [what PO believes to be the most valuable next steps]
	- product goal == desired future state of the product

Developers
- responsible for turning requirements [from product backlog] into a working product increment
- all done WITHIN the team [no external help]
- Sprint Backlog list of items developers believe they can implement in the sprint
- owned exclusively by the developers
- Daily Scrum exclusively for the developers
- to inspect progress
- plan next steps
- NOT a status meeting
- developers estimate effort needed for implementation

Scrum Master
- stance of a 'servant-leader'
- enabling and empowering others
	- teaching Scrum
	- coaching the PO
	- removing impediments
	- facilitating some/all ScrumEvents
- rarely makes any decisions
	- provides advice/support/guidance
- tries to coach developers towards self-management
- 'impediment' in ScrumMaster context: issues that go beyond developers self-management
	- internal conflicts: resolved by the team
	- structural conflicts: impedement s ScrumMaster should deal with
- "manager of the Scrum process"

Scrum Events
- mandatory events to ensure empiricism can take place
	- Sprint
	- Sprint Planning
	- Daily Scrum(s)
	- Sprint Review
	- Sprint Retrospective
- Sprint acts a 'container'
- in which all other events take place
- all events have maximium duration
- so called 'timeboxing'
- participation in events is mandatory
- many teams have 'product backlog refinements'
	- not a formal event
	- not in form of meeting
	- not in every Sprint


The Sprint
- in product development we're dealing with problems
	- that we can only learn about through experimentation
	- and which can change over time
- therefore we need to inspect and adapt repeatedly
- that is the FOUNDATION for the iterative and incremental approach of Scrum

- planning to develop
- developing while inspecting progress
- inspecting valuable [or not] result
- finding possible improvements to the process

- a sprint may be up to ONE MONTH in length 
- == "timebox" of max 1 month
- Scrum team may choose shorter timeboxes
- sprint should be long enough to produce useful result
- sprint should be short as possible [to omit producing invaluables]
- short sprints limit risk
- sprint length should remain constant over time

- sprint begins with Sprint Planning
- developers conduct Daily Scrum
- sprint ends with Sprint Review
- and Sprint Retrospective
- immediately after sprint end, new sprint begins

- output of sprint in an INCREMENT
	: 'the product before the sprint PLUS  at least one added useful outcome'
- only ProductOwner can decide to end print BEFORE timebox expires
	- if sprint goal no longer feasible
	- or worth pursuing
	- == "Cancelling a Sprint"
	- Stakeholders/ScrumMaster/Developers can encourage
	- ONLY ProductOwner can decide
	
Sprint Planning
- clarifies 3 questions:
	1. why is the sprint valuable?
	2. what is the product at the end of the Sprint supposed to deliver that it cannot do now?
	3. how will this be achieved?
- ProductOwner proposes how product could gain value through work in the Sprint
- Dev's & PO discuss how much they believe to be able to deliver
- Dev's provide forecast of what they believe they can achieve
	- often a numeric value in "Story Points", referred to as 'velocity'
- PO discusses objective this Sprint is supposed to achieve
- and which items from backlog would serve this purpose

- entire Scrum Team crafts a Sprint Goal
	'overarching goal which the work of the Dev's is supposed to achieve through delivery of an increment'
- serves as purpose of the Sprint
- all plans may/should be adjusted to ensure this goal is met

- Dev's pull as many items from backlog as they believe they can achieve
	- into their own backlog for the Sprint
	- the 'Sprint backlog'
- Dev's develop plan how [NOT who!] to implement the selected items
- there may be a back-and-forth with the PO
- the plan may include all items, but must at least plan work for coming few days
- created plan becomes part of Sprint Backlog
- Dev's are collectively responsible for Increment
	- nobody is assigned individual items
	- neither during Sprint Planning
	- nor throughout the Sprint
- Sprint planning is timeboxed to 8 hours
	- if sprint < 1 month : planning may be shorter
- output of events are:
	- Sprint Goal
	- Sprint Backlog
- Scrum Team commits to achieve the Sprint Goal [NOT the sprintbacklog items!]
- throughout Sprint the SprintBacklog is likely to change [by learning/progress]
- SprintBacklog exclusively owned by Dev's

Daily Scrum
- Dev's inspect and adapt the SprintBacklog every day during the 'Daily Scrum'
- meeting of Dev's
- 15 minutes - regardless of Sprint length / num of Dev's
- every work day, same place, same time
- create transparancy over current status towards SprintGoal
- plan next steps toward SprintGoal
- goal of DailyScrum == make achievement of SprintGoal more likely
- Dev's may raise impediments to ScrumMaster to address
- "the three questions" [now obsolete?]"
	- What done yesterday towards achieving SprintGoal?
	- What doing today towards achieving SprintGoal?
	- What impediments encountered?
- DailyScrum /may/ be supported by visualisations of internal metrics
	- like 'Sprint Burndown Chart'
	- plots remaining work in Sprint
	- often measured in "StoryPoints"
	- trendline aiming toward zero work at the end of the Sprint
- DailyScrum purpose:
	== internal synchronization 
	== inspection and adaptation of SprintBacklog
- DailyScrum is NOT intended as a status update [eg. for mgmt/SM/PO]
- internal meeting of DEV's
	- only Dev's participate
	- ScurmMaster may facilitate the event
	- ProductOwner may listen in [NOT actively participate!]
- ScrumMaster only responsible to teach/coach to keep meeting within 15 minute timebox
- not supposed for in-depth technical discussions
- possible output of Daily Scrum:
	- revised plan in SprintBacklog
	- insight that not all items in SprintBacklog will likely be achieved in Sprint
	: this insight is shared with ProductOwner
	  - together work towards reducing scope of SprintBacklog
	  - by removing lowe prioriy items
	  - while KEEPING the SprintGoal achievable
- Daily Scrum referred to as 'key inspect-and-adapt meeting'

Sprint Review
- the Increment is a Scrum Artifact
- possesses 3 key attributes
	1. is the sum of all work that is 'Done', integrated with previous Increment
	2. delivered by Dev's as a result of their work towards SprintGoal
	3. must be "usable", meaning:
		if PO chooses to release it, must be releasable without further delay/effort/workfortheuser
- "definition of Done"
	- tool for transparancy
	- defines criteria
		- which every implemented PoductBacklog item must fulfill
		- to be included in Increment
	- provided by standards of organization [eg. QualityAssurance]
	- or defined by the ScrumTeam
	- cover functional en non-functional requirements
- before Sprint Review
	- all 'Done' work is included in Increment
	- 'not Done' work is returned to ProductBacklog
	- left to PO to decide how to proceed with it [eg. include in next Sprint]
- entire Increment complies with 'Definition of Done'
	- allowing a minimal quality standard
- Sprint Review
	- event Scrum Teams meets key stakeholders
	- invited by PO
	- to inspect the Increment
	- intended to be informal
	- like a workshop
	- ScrumTeam,PO,stakeholders inspect the Increment - often by trying it out together
	- goal: gather feedback from stakeholders about current procut
	- incorporated by the PO into ProductBacklog
	- to provide next steps for product development
- other issues that may be addressed:
	- projected release dates
	- discussions about
		- timelines
		- budget
		- marketplace
	- common topic: release Increment or not
	- release MUST always be possible but does not HAVE to
		- decision up to the PO
- timeboxed to 4 hours
	- for short Sprint it can be shorter

Sprint Retrospective
- Sprint ends with 'Sprint Retrospective'
- formal opportunity for inspection and adaptation
- entire Scrum Team collaborates to inspect Sprint
- all aspects considered
	- people
	- processes
	- practices
- together try to identify possible improvements
	- to make next Sprint more effective/enjoyable
- ScrumMaster facilitates Retrospective
- common subject of inspection/adaptation:
	"Definition of Done"
	- PO and Dev's discuss requirements for product to be of high quality
	- over time quality is inspected to increase
	- "definition of done" may become more stringent over time
- at least one high-priority item from Retrospective was to be included in next Sprint Backlog
	- no longer mandatory
- timeboxed to 3 hours
	- for short Sprint it can be shorter

Scrum Values
- help 
	- to conduct work better
	- create greater transparancy
	- allow for better inspection/adaptation
- 5 values:
	1. commitment	- to goals of ScrumTeam
	2. courage		- to tackle [difficult] problems
	3. focus		- on goals of ScrumTeam
	4. openness		- with team and between team and stakeholders
	5. respect		- towards each other

Product Owner vs. Project Manager
	! not part of the Scrum Guide !
- key difference with ProjectManager are
	- scope of their responsibilities
	- subsquent effect on hierarchical authority
- Project Manager
	- leads a project
	- in charge of developers
	- authorized by organization
	- to distribute tasks
	- gives orders
	- can micro-manage developers
	- typically: monitoring the work [of developpers]
- Product Owner
	- 'lateral leader'
	- leadership by providing direction
	- not formally in charge
	- PO and Dev's are on eye level [neither in charge of the other]
	- PO has no formal authority over the Dev's
	- PO does not track work of Dev's [therefore]
	- instead focusses on their own work
- ProjectManager manages all aspects relevant to achieve project goal
- ProductOwner takes active stake in product
	- understanding it in its larger context
	- taking on responsibilty for its further improvement

What is a Product and what is Value?
- "a Product is a vehicle to deliver value
- it has a clear boundary
- known stakeholders
- well-defined users/customers
- could be a service / physical product / something more abstract"

- value in Scrum context is:
	- providing an outcome
	- which leads to a positive impact
- value is not absolute metric
	- what is valuable for one, maybe invaluable other

- the art of Product Ownership is understanding
	- the product
	- the marketplace within which it exists
	- stakeholders it is supposed to deliver value to
	- how to maximize the value delivered overall
- Product Owner often described as
	- value maximizer
	- value optimizer
	- they work with limited resources [money/time]
		- to maximize the value that can be delivered

Product Ownership in Scrum
- owning a Product means taking an active responsibility to increase the product value
- a product has stakeholders
- a PO needs to understand the requirements of stakeholders
- actively engaging with stakeholders
- based on this input PO develops an idea of what the future product should look like
- further development should aim into this direction as much as possible
- only ONE Product Goal at a time
- once achieved/abandoned: a new Product Goal is crafted
- gathered requirements are placed in the Product Backlog [a Scrum artifact]
- this Product Backlog is ordered to reflect priorities
- any method of ordering can be used
- value points are only estimates of impact
- true impact of implemented Backlog items comes from product release
- frequently releasing can helpt validate assumptions
- Product Backlog changes throughout the products lifetime
- the order will change to reflect the priorities of the PO
- can occur at any time [by PO]
- PO is final authority on Product Backlog
- PO is responsible for clearly expressing Product Backlog items
- so devs understand expectations
- PO may collaborate with devs in Product Backlog refinement
- PO is member of Scrum Team
- PO supports devs by clarifying requirements
- Devs and PO can renegotiate sprint scopeand remove items from SprintBacklog in ProductBacklog
- PO may release a product when they see fit
- the only way to determine how much a value a product delivers, is to release an increment

The Product Owner in Scrum Events
.Sprint Planning
- Sprint Planning happens at beginning of the sprint
- clarify the goal for the Sprint - the Sprint Goal
- construct initial plan how to achieve it - Sprint backlog
- PO attends Sprint Planning as a 'value maximizer'
- PO understand capacity of the devs
- PO collaborates with devs to find best way to increase product value
- PO present how next Sprint can help product gain value
- key input about what SprintGoal should be
- second input is capacity forecast of the devs
- throughout SprintPlanning PO helps devs to understand requirements
- the entire ScrumTeam defines the SprintGoal
.Daily Scrum
- PO does not actively participate in DailyScrum
- PO may attend but without participation
- PO does not track devs work
- PO does not update devs metrics
.Sprint Review
- whole Scrum Team to inspect Increment
- together with stakeholders
- usually invited by PO
- goal is:
	- to understand current status
	- to discuss next steps
	- which may result in changes to ProductBacklog
- Increment transparency is necessary, by:
	- Active,open participation
		- by Scrum Team and Stakeholders
	- Adherence to Definition-of-Done
		- common understanding what "done" means
		- specific requiremenst in DoD vary widely
		- common: must assure that Increment is usable
	1. lack of adherence leads to wrong assumptions about current product state
	2. lack of adherence leads to wrong assumptions about speed of development
	- Management of technical debt
		- important to understand how fast development can be done to create features
		- an Increment may be build fast even if technical dept is [also] built
		- if technical dept accumulates, development slows down
- once current state is understood, all participants determine next step[sp]
	- PO present Product Backlog
	- PO may oncorporate SprintReview feedback into Product Backlog
.Sprint Retrospective
- PO attends SprintRetrospective as a peer Scrum Team member
- focus of Retrospective is on improving the process [of value delivery]
- PO contributes whatever he can to this

Common Misconceptions
- the result of applying conventional thinking in a Scrum environment
- in Scrum:
Sprint Progress updates		==> updating the metrics is part of the self-management of the Devs
Task Ownership				==> Devs collectively responsible, no Dev owns any item individually
Hardening phase				==> don't exist: every Sprint delivers an increment [so no 'undone work']
Crunch time					==> no working overtime: if plans cannot be me, they need to be adjusted
Coordinate across teams		==> all members of cooperating teams are responsible for finding proper ways to collaborate
Dev launch					==> no "Sprint0" exists: requirements are gathered as more is learned, plans change,
								architecture emerges throughout	the development
Role of mgmt				==> scrum teams are self-managing, mgmt rols shifts towards supporting Scrum team and 
								fostering better self-management
- greatest misconception: that Scrum could be partially adopted
- likewise: Scrum vocabulary not adopted

Relevant Terminology
.Feature Team
- a Scrum team that develops entire, usable features [rather that individual parts of a feature]
- when there's only one Scrum team - that must be a FeatureTeam
.Layer Team
- a Scrum team that develops parts of features in a specific layer
- eg. front-end, database, persistence layer etc.
- multiple Layer Teams may work together on one product
.Technical Debt
- refers to implied cost of additional rework
- caused by choosing an easy [limited] solution now
- instead of using a better approach that would take longer
.Total Cost of Ownership
- total cost that is generated by a product to those who "own" it
- eg. who are developping an maintaining it
- used for decision if a product is still financially viable [or may be in future] - or not
- sums up all costs, including:
	- costs to conceive the idea and initial concept
	- costs to develop the product
	- costs to operate
	- costs to maintain
.Story Points
- a common format is the 'user story'
- eg. "as an X, I want Y, so I can Z"
- Devs may estimate effort needed for a user story in a relativeunit called 'story points'
.Velocity
- number of Story Points delivered by the Devs during one Sprint
