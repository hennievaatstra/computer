Namespaces and containers in Linux demystified
==============================================

The concept of 'namespaces' is used in everyday life all the time:
- the phrase "I'm a fan of the Enterprise" has one meaning in an IT company, bu may have a different meaning at a sci-fi convention
- the question 'what engine is it running?' has one meaning in a garage and a different meaning in web development

For containers, a namespace is what defines the boundaries of a process' "awareness" of what else is running around it.

On linux already a number of different namespaces are maintained, they can be listed by the 'lsns' command [util-linux package]:
	# lsns
        NS TYPE  NPROCS   PID USER   COMMAND
4026531836 pid      215     1 root   /usr/lib/systemd/systemd --switched-root --system --deserialize 22
4026531837 user     215     1 root   /usr/lib/systemd/systemd --switched-root --system --deserialize 22
4026531838 uts      215     1 root   /usr/lib/systemd/systemd --switched-root --system --deserialize 22
4026531839 ipc      215     1 root   /usr/lib/systemd/systemd --switched-root --system --deserialize 22
4026531840 mnt      205     1 root   /usr/lib/systemd/systemd --switched-root --system --deserialize 22
4026531856 mnt        1    28 root   kdevtmpfs
4026531956 net      215     1 root   /usr/lib/systemd/systemd --switched-root --system --deserialize 22
4026532266 mnt        1 27532 chrony /usr/sbin/chronyd
4026532326 mnt        8  2058 root   /usr/sbin/httpd -DFOREGROUND

Each process is enumerated with a PID, each PID is assigned a namespace.
PIDs in the same namespace can have access to one another.
PIDs in different namespaces are unable to interact with one another by default.

This is why a process, running in a "container" under one namespace, cannot access information outside this container or access information running inside another container.

--- extra
The 'unshare' command runs a program in a namespace UNSHARED from its parent process.

To create a new namespace for you test comamnd:
	$ sudo unshare --frok --pid --mount-proc zsh
	#
As long as you remain in the ZSH session, you can see that you have left the usual namespace by looking at the PID of you new forked process:
	# pidoff zsh
	# 1
ZSH sees itself as PID 1 only because its is confined to 9or contained within0 its namespace.
The "host" system sees the big picture and understands that ZSH is actually running as some high-numbered PID.


