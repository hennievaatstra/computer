Configure GIT server on CentOS8
===============================

. update repos
	# sudo dnf makecache

. install git
	# dnf install git

. create git user
	# useradd git
	# passwd git

. create repo
	# cd /srv/GIT
	# git init --bare --shared=group test001.git
Initialized empty shared Git repository in /srv/GIT/test001.git/
	:or just simply

	# mkdir project.git
	# git init 
Initialized empty Git repository in /srv/GIT/proj01.git/.git/

. checkout the repo
	:local
	# git clone /srv/GIT/proj01.gi

	:remote
	# git clone <username>@<host>:/srv/GIT/proj01.git
	# git clone git@crdlxhv01:/srv/GIT/proj01.git

. workflow
	:the local [cloned] repo consists of three "trees" maintained by GIT
	:the first is the WorkingDirectory with the actual files
	:the second is the Index which act as staging area
	:the third is the HEAD which point to the last commit yo've made

. add & commit
	:you can propose changes [adds to the Index] using
	# git add <filename>
	# git add *
	# git add .

	:to actually commit those changes, use
	# git commit -m "Commit message"
	:now the file is committed to the HEAD, but not to your remote repo yet

. pushing changes
	:your changes are now in the HEAD of you local working copy
	:to send those changes to the remote repo, execute
	# git push origin master
	: change 'master' to whatever branch you want ot push your changes to

	:if you have not 'cloned' an existing repo and want to connect your local
	:repo to a remote server, you need to ADD it:
	# git remote add origin <server>
	:then push you commit
	# git push origin master
	::for this a remote repo was needed [due to access rights]

. branching
	:a branch is a pointer to a commit
	:used to develop features isolated from each other
	:the MASTER branch is the 'default'

	. create a new branch
	# git checkout -b feature_x
	Switched to a new branch 'feature_x'
	:switch back to master
	# git checkout master
	:delete the branch again
	# git branch -d feature_x

	:a branch is NOT available to others unless you push to rthe remote repo
	# git push origin branch

. update & merge
	:to update the local repo to the newest commit, execute
	# git pull
	:in your working directory to fetch and merge remote changes

	:to merge another branch in your active branch [eg. master], use
	# git merge <branch>

. tagging
	:recommended for software releases, execute
	# git tag 1.0.0 5b10fecabc

	:5b10fecabc are the first 10 chars of the commit id to be tagged
	:look up the commit id using
	# git log

. logging
	:see repo history using
	# git log --author=root
	# git log --pretty=oneline
	etc.

. replace local changes
	:to replace changes in the workingdir with the last content in HEAD, run
	# git checkout -- <filename>
	:changed already added to the index as well as new files will be kept

	:if you want to drop all you local changes and commits,
	:fetch the latest history from hte server and point your local master branch at
	# git fetch origin
	# git reset --hard origin/master

see also: https://rogerdudler.github.io/git-guide/





--------------------------------------------------------------------------------
. set ownership
	# chown -R git.git test001.git
	# chmod 2775 test001.git
	# chmod -R g+w test001.git

--- on client
	# mkdir proj
	# cd proj
	# git init
	:now add/work you file
	  # vi 123

	# git add .
	# git commit -m "123 added" -a
	# git remote add origin git@crdlxhv02.son.catena.nl:/srv/GIT/test001.git
	# git push origin master

. clone
	# git clone git@crdlxhv02.son.catena.nl:/srv/GIT/test001.git 
Cloning into 'test001'...
git@crdlxhv02.son.catena.nl's password: 
remote: Enumerating objects: 9, done.
remote: Counting objects: 100% (9/9), done.
remote: Compressing objects: 100% (5/5), done.
remote: Total 9 (delta 1), reused 0 (delta 0)
Receiving objects: 100% (9/9), done.
Resolving deltas: 100% (1/1), done.

. edit
	# cd test001.git
	# vi <file>

	# git add .
	# git commit -m <comment> -a
	# git push
